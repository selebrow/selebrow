// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// IEvent is an autogenerated mock type for the IEvent type
type IEvent struct {
	mock.Mock
}

type IEvent_Expecter struct {
	mock *mock.Mock
}

func (_m *IEvent) EXPECT() *IEvent_Expecter {
	return &IEvent_Expecter{mock: &_m.Mock}
}

// EventTime provides a mock function with no fields
func (_m *IEvent) EventTime() time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EventTime")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// IEvent_EventTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EventTime'
type IEvent_EventTime_Call struct {
	*mock.Call
}

// EventTime is a helper method to define mock.On call
func (_e *IEvent_Expecter) EventTime() *IEvent_EventTime_Call {
	return &IEvent_EventTime_Call{Call: _e.mock.On("EventTime")}
}

func (_c *IEvent_EventTime_Call) Run(run func()) *IEvent_EventTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IEvent_EventTime_Call) Return(_a0 time.Time) *IEvent_EventTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IEvent_EventTime_Call) RunAndReturn(run func() time.Time) *IEvent_EventTime_Call {
	_c.Call.Return(run)
	return _c
}

// EventType provides a mock function with no fields
func (_m *IEvent) EventType() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EventType")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IEvent_EventType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EventType'
type IEvent_EventType_Call struct {
	*mock.Call
}

// EventType is a helper method to define mock.On call
func (_e *IEvent_Expecter) EventType() *IEvent_EventType_Call {
	return &IEvent_EventType_Call{Call: _e.mock.On("EventType")}
}

func (_c *IEvent_EventType_Call) Run(run func()) *IEvent_EventType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IEvent_EventType_Call) Return(_a0 string) *IEvent_EventType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IEvent_EventType_Call) RunAndReturn(run func() string) *IEvent_EventType_Call {
	_c.Call.Return(run)
	return _c
}

// NewIEvent creates a new instance of IEvent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIEvent(t interface {
	mock.TestingT
	Cleanup(func())
}) *IEvent {
	mock := &IEvent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
