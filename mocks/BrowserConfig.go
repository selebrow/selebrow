// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// BrowserConfig is an autogenerated mock type for the BrowserConfig type
type BrowserConfig struct {
	mock.Mock
}

type BrowserConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *BrowserConfig) EXPECT() *BrowserConfig_Expecter {
	return &BrowserConfig_Expecter{mock: &_m.Mock}
}

// ConnectTimeout provides a mock function with no fields
func (_m *BrowserConfig) ConnectTimeout() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ConnectTimeout")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// BrowserConfig_ConnectTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConnectTimeout'
type BrowserConfig_ConnectTimeout_Call struct {
	*mock.Call
}

// ConnectTimeout is a helper method to define mock.On call
func (_e *BrowserConfig_Expecter) ConnectTimeout() *BrowserConfig_ConnectTimeout_Call {
	return &BrowserConfig_ConnectTimeout_Call{Call: _e.mock.On("ConnectTimeout")}
}

func (_c *BrowserConfig_ConnectTimeout_Call) Run(run func()) *BrowserConfig_ConnectTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BrowserConfig_ConnectTimeout_Call) Return(_a0 time.Duration) *BrowserConfig_ConnectTimeout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BrowserConfig_ConnectTimeout_Call) RunAndReturn(run func() time.Duration) *BrowserConfig_ConnectTimeout_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRetries provides a mock function with no fields
func (_m *BrowserConfig) CreateRetries() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateRetries")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// BrowserConfig_CreateRetries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRetries'
type BrowserConfig_CreateRetries_Call struct {
	*mock.Call
}

// CreateRetries is a helper method to define mock.On call
func (_e *BrowserConfig_Expecter) CreateRetries() *BrowserConfig_CreateRetries_Call {
	return &BrowserConfig_CreateRetries_Call{Call: _e.mock.On("CreateRetries")}
}

func (_c *BrowserConfig_CreateRetries_Call) Run(run func()) *BrowserConfig_CreateRetries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BrowserConfig_CreateRetries_Call) Return(_a0 int) *BrowserConfig_CreateRetries_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BrowserConfig_CreateRetries_Call) RunAndReturn(run func() int) *BrowserConfig_CreateRetries_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTimeout provides a mock function with no fields
func (_m *BrowserConfig) CreateTimeout() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateTimeout")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// BrowserConfig_CreateTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTimeout'
type BrowserConfig_CreateTimeout_Call struct {
	*mock.Call
}

// CreateTimeout is a helper method to define mock.On call
func (_e *BrowserConfig_Expecter) CreateTimeout() *BrowserConfig_CreateTimeout_Call {
	return &BrowserConfig_CreateTimeout_Call{Call: _e.mock.On("CreateTimeout")}
}

func (_c *BrowserConfig_CreateTimeout_Call) Run(run func()) *BrowserConfig_CreateTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BrowserConfig_CreateTimeout_Call) Return(_a0 time.Duration) *BrowserConfig_CreateTimeout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BrowserConfig_CreateTimeout_Call) RunAndReturn(run func() time.Duration) *BrowserConfig_CreateTimeout_Call {
	_c.Call.Return(run)
	return _c
}

// NewBrowserConfig creates a new instance of BrowserConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBrowserConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *BrowserConfig {
	mock := &BrowserConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
