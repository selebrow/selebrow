// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	capabilities "github.com/selebrow/selebrow/pkg/capabilities"

	mock "github.com/stretchr/testify/mock"

	models "github.com/selebrow/selebrow/pkg/models"

	v1 "k8s.io/api/core/v1"
)

// BrowserConverter is an autogenerated mock type for the BrowserConverter type
type BrowserConverter struct {
	mock.Mock
}

type BrowserConverter_Expecter struct {
	mock *mock.Mock
}

func (_m *BrowserConverter) EXPECT() *BrowserConverter_Expecter {
	return &BrowserConverter_Expecter{mock: &_m.Mock}
}

// ToPod provides a mock function with given fields: cfg, caps
func (_m *BrowserConverter) ToPod(cfg models.BrowserImageConfig, caps capabilities.Capabilities) (v1.Pod, error) {
	ret := _m.Called(cfg, caps)

	if len(ret) == 0 {
		panic("no return value specified for ToPod")
	}

	var r0 v1.Pod
	var r1 error
	if rf, ok := ret.Get(0).(func(models.BrowserImageConfig, capabilities.Capabilities) (v1.Pod, error)); ok {
		return rf(cfg, caps)
	}
	if rf, ok := ret.Get(0).(func(models.BrowserImageConfig, capabilities.Capabilities) v1.Pod); ok {
		r0 = rf(cfg, caps)
	} else {
		r0 = ret.Get(0).(v1.Pod)
	}

	if rf, ok := ret.Get(1).(func(models.BrowserImageConfig, capabilities.Capabilities) error); ok {
		r1 = rf(cfg, caps)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BrowserConverter_ToPod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToPod'
type BrowserConverter_ToPod_Call struct {
	*mock.Call
}

// ToPod is a helper method to define mock.On call
//   - cfg models.BrowserImageConfig
//   - caps capabilities.Capabilities
func (_e *BrowserConverter_Expecter) ToPod(cfg interface{}, caps interface{}) *BrowserConverter_ToPod_Call {
	return &BrowserConverter_ToPod_Call{Call: _e.mock.On("ToPod", cfg, caps)}
}

func (_c *BrowserConverter_ToPod_Call) Run(run func(cfg models.BrowserImageConfig, caps capabilities.Capabilities)) *BrowserConverter_ToPod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.BrowserImageConfig), args[1].(capabilities.Capabilities))
	})
	return _c
}

func (_c *BrowserConverter_ToPod_Call) Return(_a0 v1.Pod, _a1 error) *BrowserConverter_ToPod_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BrowserConverter_ToPod_Call) RunAndReturn(run func(models.BrowserImageConfig, capabilities.Capabilities) (v1.Pod, error)) *BrowserConverter_ToPod_Call {
	_c.Call.Return(run)
	return _c
}

// NewBrowserConverter creates a new instance of BrowserConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBrowserConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *BrowserConverter {
	mock := &BrowserConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
