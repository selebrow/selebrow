// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Hash is an autogenerated mock type for the Hash type
type Hash struct {
	mock.Mock
}

type Hash_Expecter struct {
	mock *mock.Mock
}

func (_m *Hash) EXPECT() *Hash_Expecter {
	return &Hash_Expecter{mock: &_m.Mock}
}

// BlockSize provides a mock function with no fields
func (_m *Hash) BlockSize() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BlockSize")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Hash_BlockSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockSize'
type Hash_BlockSize_Call struct {
	*mock.Call
}

// BlockSize is a helper method to define mock.On call
func (_e *Hash_Expecter) BlockSize() *Hash_BlockSize_Call {
	return &Hash_BlockSize_Call{Call: _e.mock.On("BlockSize")}
}

func (_c *Hash_BlockSize_Call) Run(run func()) *Hash_BlockSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Hash_BlockSize_Call) Return(_a0 int) *Hash_BlockSize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Hash_BlockSize_Call) RunAndReturn(run func() int) *Hash_BlockSize_Call {
	_c.Call.Return(run)
	return _c
}

// Reset provides a mock function with no fields
func (_m *Hash) Reset() {
	_m.Called()
}

// Hash_Reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset'
type Hash_Reset_Call struct {
	*mock.Call
}

// Reset is a helper method to define mock.On call
func (_e *Hash_Expecter) Reset() *Hash_Reset_Call {
	return &Hash_Reset_Call{Call: _e.mock.On("Reset")}
}

func (_c *Hash_Reset_Call) Run(run func()) *Hash_Reset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Hash_Reset_Call) Return() *Hash_Reset_Call {
	_c.Call.Return()
	return _c
}

func (_c *Hash_Reset_Call) RunAndReturn(run func()) *Hash_Reset_Call {
	_c.Run(run)
	return _c
}

// Size provides a mock function with no fields
func (_m *Hash) Size() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Hash_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type Hash_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
func (_e *Hash_Expecter) Size() *Hash_Size_Call {
	return &Hash_Size_Call{Call: _e.mock.On("Size")}
}

func (_c *Hash_Size_Call) Run(run func()) *Hash_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Hash_Size_Call) Return(_a0 int) *Hash_Size_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Hash_Size_Call) RunAndReturn(run func() int) *Hash_Size_Call {
	_c.Call.Return(run)
	return _c
}

// Sum provides a mock function with given fields: b
func (_m *Hash) Sum(b []byte) []byte {
	ret := _m.Called(b)

	if len(ret) == 0 {
		panic("no return value specified for Sum")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(b)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// Hash_Sum_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sum'
type Hash_Sum_Call struct {
	*mock.Call
}

// Sum is a helper method to define mock.On call
//   - b []byte
func (_e *Hash_Expecter) Sum(b interface{}) *Hash_Sum_Call {
	return &Hash_Sum_Call{Call: _e.mock.On("Sum", b)}
}

func (_c *Hash_Sum_Call) Run(run func(b []byte)) *Hash_Sum_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *Hash_Sum_Call) Return(_a0 []byte) *Hash_Sum_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Hash_Sum_Call) RunAndReturn(run func([]byte) []byte) *Hash_Sum_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: p
func (_m *Hash) Write(p []byte) (int, error) {
	ret := _m.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return rf(p)
	}
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Hash_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type Hash_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - p []byte
func (_e *Hash_Expecter) Write(p interface{}) *Hash_Write_Call {
	return &Hash_Write_Call{Call: _e.mock.On("Write", p)}
}

func (_c *Hash_Write_Call) Run(run func(p []byte)) *Hash_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *Hash_Write_Call) Return(n int, err error) *Hash_Write_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *Hash_Write_Call) RunAndReturn(run func([]byte) (int, error)) *Hash_Write_Call {
	_c.Call.Return(run)
	return _c
}

// NewHash creates a new instance of Hash. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHash(t interface {
	mock.TestingT
	Cleanup(func())
}) *Hash {
	mock := &Hash{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
