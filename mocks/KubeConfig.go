// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// KubeConfig is an autogenerated mock type for the KubeConfig type
type KubeConfig struct {
	mock.Mock
}

type KubeConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *KubeConfig) EXPECT() *KubeConfig_Expecter {
	return &KubeConfig_Expecter{mock: &_m.Mock}
}

// KubeClusterModeOut provides a mock function with no fields
func (_m *KubeConfig) KubeClusterModeOut() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for KubeClusterModeOut")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// KubeConfig_KubeClusterModeOut_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KubeClusterModeOut'
type KubeConfig_KubeClusterModeOut_Call struct {
	*mock.Call
}

// KubeClusterModeOut is a helper method to define mock.On call
func (_e *KubeConfig_Expecter) KubeClusterModeOut() *KubeConfig_KubeClusterModeOut_Call {
	return &KubeConfig_KubeClusterModeOut_Call{Call: _e.mock.On("KubeClusterModeOut")}
}

func (_c *KubeConfig_KubeClusterModeOut_Call) Run(run func()) *KubeConfig_KubeClusterModeOut_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KubeConfig_KubeClusterModeOut_Call) Return(_a0 bool) *KubeConfig_KubeClusterModeOut_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KubeConfig_KubeClusterModeOut_Call) RunAndReturn(run func() bool) *KubeConfig_KubeClusterModeOut_Call {
	_c.Call.Return(run)
	return _c
}

// KubeConfig provides a mock function with no fields
func (_m *KubeConfig) KubeConfig() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for KubeConfig")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// KubeConfig_KubeConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KubeConfig'
type KubeConfig_KubeConfig_Call struct {
	*mock.Call
}

// KubeConfig is a helper method to define mock.On call
func (_e *KubeConfig_Expecter) KubeConfig() *KubeConfig_KubeConfig_Call {
	return &KubeConfig_KubeConfig_Call{Call: _e.mock.On("KubeConfig")}
}

func (_c *KubeConfig_KubeConfig_Call) Run(run func()) *KubeConfig_KubeConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KubeConfig_KubeConfig_Call) Return(_a0 string) *KubeConfig_KubeConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KubeConfig_KubeConfig_Call) RunAndReturn(run func() string) *KubeConfig_KubeConfig_Call {
	_c.Call.Return(run)
	return _c
}

// KubeTemplatesPath provides a mock function with no fields
func (_m *KubeConfig) KubeTemplatesPath() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for KubeTemplatesPath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// KubeConfig_KubeTemplatesPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KubeTemplatesPath'
type KubeConfig_KubeTemplatesPath_Call struct {
	*mock.Call
}

// KubeTemplatesPath is a helper method to define mock.On call
func (_e *KubeConfig_Expecter) KubeTemplatesPath() *KubeConfig_KubeTemplatesPath_Call {
	return &KubeConfig_KubeTemplatesPath_Call{Call: _e.mock.On("KubeTemplatesPath")}
}

func (_c *KubeConfig_KubeTemplatesPath_Call) Run(run func()) *KubeConfig_KubeTemplatesPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KubeConfig_KubeTemplatesPath_Call) Return(_a0 string) *KubeConfig_KubeTemplatesPath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KubeConfig_KubeTemplatesPath_Call) RunAndReturn(run func() string) *KubeConfig_KubeTemplatesPath_Call {
	_c.Call.Return(run)
	return _c
}

// Namespace provides a mock function with no fields
func (_m *KubeConfig) Namespace() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Namespace")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// KubeConfig_Namespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Namespace'
type KubeConfig_Namespace_Call struct {
	*mock.Call
}

// Namespace is a helper method to define mock.On call
func (_e *KubeConfig_Expecter) Namespace() *KubeConfig_Namespace_Call {
	return &KubeConfig_Namespace_Call{Call: _e.mock.On("Namespace")}
}

func (_c *KubeConfig_Namespace_Call) Run(run func()) *KubeConfig_Namespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KubeConfig_Namespace_Call) Return(_a0 string) *KubeConfig_Namespace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KubeConfig_Namespace_Call) RunAndReturn(run func() string) *KubeConfig_Namespace_Call {
	_c.Call.Return(run)
	return _c
}

// NewKubeConfig creates a new instance of KubeConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKubeConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *KubeConfig {
	mock := &KubeConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
