// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"
)

// ConfigController is an autogenerated mock type for the ConfigController type
type ConfigController struct {
	mock.Mock
}

type ConfigController_Expecter struct {
	mock *mock.Mock
}

func (_m *ConfigController) EXPECT() *ConfigController_Expecter {
	return &ConfigController_Expecter{mock: &_m.Mock}
}

// GetConfig provides a mock function with given fields: c
func (_m *ConfigController) GetConfig(c echo.Context) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConfigController_GetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfig'
type ConfigController_GetConfig_Call struct {
	*mock.Call
}

// GetConfig is a helper method to define mock.On call
//   - c echo.Context
func (_e *ConfigController_Expecter) GetConfig(c interface{}) *ConfigController_GetConfig_Call {
	return &ConfigController_GetConfig_Call{Call: _e.mock.On("GetConfig", c)}
}

func (_c *ConfigController_GetConfig_Call) Run(run func(c echo.Context)) *ConfigController_GetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *ConfigController_GetConfig_Call) Return(_a0 error) *ConfigController_GetConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConfigController_GetConfig_Call) RunAndReturn(run func(echo.Context) error) *ConfigController_GetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: c
func (_m *ConfigController) List(c echo.Context) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConfigController_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type ConfigController_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - c echo.Context
func (_e *ConfigController_Expecter) List(c interface{}) *ConfigController_List_Call {
	return &ConfigController_List_Call{Call: _e.mock.On("List", c)}
}

func (_c *ConfigController_List_Call) Run(run func(c echo.Context)) *ConfigController_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *ConfigController_List_Call) Return(_a0 error) *ConfigController_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConfigController_List_Call) RunAndReturn(run func(echo.Context) error) *ConfigController_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewConfigController creates a new instance of ConfigController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConfigController(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConfigController {
	mock := &ConfigController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
