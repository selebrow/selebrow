// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	websocket "golang.org/x/net/websocket"
)

// WSProxy is an autogenerated mock type for the WSProxy type
type WSProxy struct {
	mock.Mock
}

type WSProxy_Expecter struct {
	mock *mock.Mock
}

func (_m *WSProxy) EXPECT() *WSProxy_Expecter {
	return &WSProxy_Expecter{mock: &_m.Mock}
}

// Handler provides a mock function with given fields: hostport
func (_m *WSProxy) Handler(hostport string) websocket.Handler {
	ret := _m.Called(hostport)

	if len(ret) == 0 {
		panic("no return value specified for Handler")
	}

	var r0 websocket.Handler
	if rf, ok := ret.Get(0).(func(string) websocket.Handler); ok {
		r0 = rf(hostport)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(websocket.Handler)
		}
	}

	return r0
}

// WSProxy_Handler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handler'
type WSProxy_Handler_Call struct {
	*mock.Call
}

// Handler is a helper method to define mock.On call
//   - hostport string
func (_e *WSProxy_Expecter) Handler(hostport interface{}) *WSProxy_Handler_Call {
	return &WSProxy_Handler_Call{Call: _e.mock.On("Handler", hostport)}
}

func (_c *WSProxy_Handler_Call) Run(run func(hostport string)) *WSProxy_Handler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *WSProxy_Handler_Call) Return(_a0 websocket.Handler) *WSProxy_Handler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *WSProxy_Handler_Call) RunAndReturn(run func(string) websocket.Handler) *WSProxy_Handler_Call {
	_c.Call.Return(run)
	return _c
}

// NewWSProxy creates a new instance of WSProxy. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWSProxy(t interface {
	mock.TestingT
	Cleanup(func())
}) *WSProxy {
	mock := &WSProxy{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
