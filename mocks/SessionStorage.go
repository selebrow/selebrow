// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	models "github.com/selebrow/selebrow/pkg/models"
	mock "github.com/stretchr/testify/mock"

	session "github.com/selebrow/selebrow/internal/services/session"
)

// SessionStorage is an autogenerated mock type for the SessionStorage type
type SessionStorage struct {
	mock.Mock
}

type SessionStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *SessionStorage) EXPECT() *SessionStorage_Expecter {
	return &SessionStorage_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: protocol, sess
func (_m *SessionStorage) Add(protocol models.BrowserProtocol, sess *session.Session) error {
	ret := _m.Called(protocol, sess)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.BrowserProtocol, *session.Session) error); ok {
		r0 = rf(protocol, sess)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionStorage_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type SessionStorage_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - protocol models.BrowserProtocol
//   - sess *session.Session
func (_e *SessionStorage_Expecter) Add(protocol interface{}, sess interface{}) *SessionStorage_Add_Call {
	return &SessionStorage_Add_Call{Call: _e.mock.On("Add", protocol, sess)}
}

func (_c *SessionStorage_Add_Call) Run(run func(protocol models.BrowserProtocol, sess *session.Session)) *SessionStorage_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.BrowserProtocol), args[1].(*session.Session))
	})
	return _c
}

func (_c *SessionStorage_Add_Call) Return(_a0 error) *SessionStorage_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionStorage_Add_Call) RunAndReturn(run func(models.BrowserProtocol, *session.Session) error) *SessionStorage_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: protocol, id
func (_m *SessionStorage) Delete(protocol models.BrowserProtocol, id string) bool {
	ret := _m.Called(protocol, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(models.BrowserProtocol, string) bool); ok {
		r0 = rf(protocol, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SessionStorage_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type SessionStorage_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - protocol models.BrowserProtocol
//   - id string
func (_e *SessionStorage_Expecter) Delete(protocol interface{}, id interface{}) *SessionStorage_Delete_Call {
	return &SessionStorage_Delete_Call{Call: _e.mock.On("Delete", protocol, id)}
}

func (_c *SessionStorage_Delete_Call) Run(run func(protocol models.BrowserProtocol, id string)) *SessionStorage_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.BrowserProtocol), args[1].(string))
	})
	return _c
}

func (_c *SessionStorage_Delete_Call) Return(_a0 bool) *SessionStorage_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionStorage_Delete_Call) RunAndReturn(run func(models.BrowserProtocol, string) bool) *SessionStorage_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: protocol, id
func (_m *SessionStorage) Get(protocol models.BrowserProtocol, id string) (*session.Session, bool) {
	ret := _m.Called(protocol, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *session.Session
	var r1 bool
	if rf, ok := ret.Get(0).(func(models.BrowserProtocol, string) (*session.Session, bool)); ok {
		return rf(protocol, id)
	}
	if rf, ok := ret.Get(0).(func(models.BrowserProtocol, string) *session.Session); ok {
		r0 = rf(protocol, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*session.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(models.BrowserProtocol, string) bool); ok {
		r1 = rf(protocol, id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// SessionStorage_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type SessionStorage_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - protocol models.BrowserProtocol
//   - id string
func (_e *SessionStorage_Expecter) Get(protocol interface{}, id interface{}) *SessionStorage_Get_Call {
	return &SessionStorage_Get_Call{Call: _e.mock.On("Get", protocol, id)}
}

func (_c *SessionStorage_Get_Call) Run(run func(protocol models.BrowserProtocol, id string)) *SessionStorage_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.BrowserProtocol), args[1].(string))
	})
	return _c
}

func (_c *SessionStorage_Get_Call) Return(_a0 *session.Session, _a1 bool) *SessionStorage_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SessionStorage_Get_Call) RunAndReturn(run func(models.BrowserProtocol, string) (*session.Session, bool)) *SessionStorage_Get_Call {
	_c.Call.Return(run)
	return _c
}

// IsShutdown provides a mock function with no fields
func (_m *SessionStorage) IsShutdown() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsShutdown")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SessionStorage_IsShutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsShutdown'
type SessionStorage_IsShutdown_Call struct {
	*mock.Call
}

// IsShutdown is a helper method to define mock.On call
func (_e *SessionStorage_Expecter) IsShutdown() *SessionStorage_IsShutdown_Call {
	return &SessionStorage_IsShutdown_Call{Call: _e.mock.On("IsShutdown")}
}

func (_c *SessionStorage_IsShutdown_Call) Run(run func()) *SessionStorage_IsShutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SessionStorage_IsShutdown_Call) Return(_a0 bool) *SessionStorage_IsShutdown_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionStorage_IsShutdown_Call) RunAndReturn(run func() bool) *SessionStorage_IsShutdown_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: protocol
func (_m *SessionStorage) List(protocol models.BrowserProtocol) []*session.Session {
	ret := _m.Called(protocol)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*session.Session
	if rf, ok := ret.Get(0).(func(models.BrowserProtocol) []*session.Session); ok {
		r0 = rf(protocol)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*session.Session)
		}
	}

	return r0
}

// SessionStorage_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type SessionStorage_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - protocol models.BrowserProtocol
func (_e *SessionStorage_Expecter) List(protocol interface{}) *SessionStorage_List_Call {
	return &SessionStorage_List_Call{Call: _e.mock.On("List", protocol)}
}

func (_c *SessionStorage_List_Call) Run(run func(protocol models.BrowserProtocol)) *SessionStorage_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.BrowserProtocol))
	})
	return _c
}

func (_c *SessionStorage_List_Call) Return(_a0 []*session.Session) *SessionStorage_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionStorage_List_Call) RunAndReturn(run func(models.BrowserProtocol) []*session.Session) *SessionStorage_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewSessionStorage creates a new instance of SessionStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSessionStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *SessionStorage {
	mock := &SessionStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
