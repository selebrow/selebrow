// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	dto "github.com/selebrow/selebrow/pkg/dto"
	mock "github.com/stretchr/testify/mock"
)

// QuotaService is an autogenerated mock type for the QuotaService type
type QuotaService struct {
	mock.Mock
}

type QuotaService_Expecter struct {
	mock *mock.Mock
}

func (_m *QuotaService) EXPECT() *QuotaService_Expecter {
	return &QuotaService_Expecter{mock: &_m.Mock}
}

// GetQuotaUsage provides a mock function with no fields
func (_m *QuotaService) GetQuotaUsage() *dto.QuotaUsage {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetQuotaUsage")
	}

	var r0 *dto.QuotaUsage
	if rf, ok := ret.Get(0).(func() *dto.QuotaUsage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.QuotaUsage)
		}
	}

	return r0
}

// QuotaService_GetQuotaUsage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQuotaUsage'
type QuotaService_GetQuotaUsage_Call struct {
	*mock.Call
}

// GetQuotaUsage is a helper method to define mock.On call
func (_e *QuotaService_Expecter) GetQuotaUsage() *QuotaService_GetQuotaUsage_Call {
	return &QuotaService_GetQuotaUsage_Call{Call: _e.mock.On("GetQuotaUsage")}
}

func (_c *QuotaService_GetQuotaUsage_Call) Run(run func()) *QuotaService_GetQuotaUsage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *QuotaService_GetQuotaUsage_Call) Return(_a0 *dto.QuotaUsage) *QuotaService_GetQuotaUsage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QuotaService_GetQuotaUsage_Call) RunAndReturn(run func() *dto.QuotaUsage) *QuotaService_GetQuotaUsage_Call {
	_c.Call.Return(run)
	return _c
}

// NewQuotaService creates a new instance of QuotaService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQuotaService(t interface {
	mock.TestingT
	Cleanup(func())
}) *QuotaService {
	mock := &QuotaService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
