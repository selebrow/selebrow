// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	models "github.com/selebrow/selebrow/pkg/event/models"
	mock "github.com/stretchr/testify/mock"
)

// EventBroker is an autogenerated mock type for the EventBroker type
type EventBroker struct {
	mock.Mock
}

type EventBroker_Expecter struct {
	mock *mock.Mock
}

func (_m *EventBroker) EXPECT() *EventBroker_Expecter {
	return &EventBroker_Expecter{mock: &_m.Mock}
}

// Publish provides a mock function with given fields: _a0
func (_m *EventBroker) Publish(_a0 models.IEvent) {
	_m.Called(_a0)
}

// EventBroker_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type EventBroker_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - _a0 models.IEvent
func (_e *EventBroker_Expecter) Publish(_a0 interface{}) *EventBroker_Publish_Call {
	return &EventBroker_Publish_Call{Call: _e.mock.On("Publish", _a0)}
}

func (_c *EventBroker_Publish_Call) Run(run func(_a0 models.IEvent)) *EventBroker_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.IEvent))
	})
	return _c
}

func (_c *EventBroker_Publish_Call) Return() *EventBroker_Publish_Call {
	_c.Call.Return()
	return _c
}

func (_c *EventBroker_Publish_Call) RunAndReturn(run func(models.IEvent)) *EventBroker_Publish_Call {
	_c.Run(run)
	return _c
}

// Subscribe provides a mock function with given fields: eventTypes
func (_m *EventBroker) Subscribe(eventTypes ...string) <-chan models.IEvent {
	_va := make([]interface{}, len(eventTypes))
	for _i := range eventTypes {
		_va[_i] = eventTypes[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 <-chan models.IEvent
	if rf, ok := ret.Get(0).(func(...string) <-chan models.IEvent); ok {
		r0 = rf(eventTypes...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan models.IEvent)
		}
	}

	return r0
}

// EventBroker_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type EventBroker_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - eventTypes ...string
func (_e *EventBroker_Expecter) Subscribe(eventTypes ...interface{}) *EventBroker_Subscribe_Call {
	return &EventBroker_Subscribe_Call{Call: _e.mock.On("Subscribe",
		append([]interface{}{}, eventTypes...)...)}
}

func (_c *EventBroker_Subscribe_Call) Run(run func(eventTypes ...string)) *EventBroker_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *EventBroker_Subscribe_Call) Return(_a0 <-chan models.IEvent) *EventBroker_Subscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventBroker_Subscribe_Call) RunAndReturn(run func(...string) <-chan models.IEvent) *EventBroker_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// NewEventBroker creates a new instance of EventBroker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventBroker(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventBroker {
	mock := &EventBroker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
