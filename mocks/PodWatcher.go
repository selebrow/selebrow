// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// PodWatcher is an autogenerated mock type for the PodWatcher type
type PodWatcher struct {
	mock.Mock
}

type PodWatcher_Expecter struct {
	mock *mock.Mock
}

func (_m *PodWatcher) EXPECT() *PodWatcher_Expecter {
	return &PodWatcher_Expecter{mock: &_m.Mock}
}

// WaitPodReady provides a mock function with given fields: ctx, podName
func (_m *PodWatcher) WaitPodReady(ctx context.Context, podName string) (string, error) {
	ret := _m.Called(ctx, podName)

	if len(ret) == 0 {
		panic("no return value specified for WaitPodReady")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, podName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, podName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, podName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PodWatcher_WaitPodReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitPodReady'
type PodWatcher_WaitPodReady_Call struct {
	*mock.Call
}

// WaitPodReady is a helper method to define mock.On call
//   - ctx context.Context
//   - podName string
func (_e *PodWatcher_Expecter) WaitPodReady(ctx interface{}, podName interface{}) *PodWatcher_WaitPodReady_Call {
	return &PodWatcher_WaitPodReady_Call{Call: _e.mock.On("WaitPodReady", ctx, podName)}
}

func (_c *PodWatcher_WaitPodReady_Call) Run(run func(ctx context.Context, podName string)) *PodWatcher_WaitPodReady_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *PodWatcher_WaitPodReady_Call) Return(_a0 string, _a1 error) *PodWatcher_WaitPodReady_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PodWatcher_WaitPodReady_Call) RunAndReturn(run func(context.Context, string) (string, error)) *PodWatcher_WaitPodReady_Call {
	_c.Call.Return(run)
	return _c
}

// NewPodWatcher creates a new instance of PodWatcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPodWatcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *PodWatcher {
	mock := &PodWatcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
