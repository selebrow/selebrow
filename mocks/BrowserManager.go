// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	browser "github.com/selebrow/selebrow/pkg/browser"
	capabilities "github.com/selebrow/selebrow/pkg/capabilities"

	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/selebrow/selebrow/pkg/models"
)

// BrowserManager is an autogenerated mock type for the BrowserManager type
type BrowserManager struct {
	mock.Mock
}

type BrowserManager_Expecter struct {
	mock *mock.Mock
}

func (_m *BrowserManager) EXPECT() *BrowserManager_Expecter {
	return &BrowserManager_Expecter{mock: &_m.Mock}
}

// Allocate provides a mock function with given fields: ctx, protocol, caps
func (_m *BrowserManager) Allocate(ctx context.Context, protocol models.BrowserProtocol, caps capabilities.Capabilities) (browser.Browser, error) {
	ret := _m.Called(ctx, protocol, caps)

	if len(ret) == 0 {
		panic("no return value specified for Allocate")
	}

	var r0 browser.Browser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.BrowserProtocol, capabilities.Capabilities) (browser.Browser, error)); ok {
		return rf(ctx, protocol, caps)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.BrowserProtocol, capabilities.Capabilities) browser.Browser); ok {
		r0 = rf(ctx, protocol, caps)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(browser.Browser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.BrowserProtocol, capabilities.Capabilities) error); ok {
		r1 = rf(ctx, protocol, caps)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BrowserManager_Allocate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Allocate'
type BrowserManager_Allocate_Call struct {
	*mock.Call
}

// Allocate is a helper method to define mock.On call
//   - ctx context.Context
//   - protocol models.BrowserProtocol
//   - caps capabilities.Capabilities
func (_e *BrowserManager_Expecter) Allocate(ctx interface{}, protocol interface{}, caps interface{}) *BrowserManager_Allocate_Call {
	return &BrowserManager_Allocate_Call{Call: _e.mock.On("Allocate", ctx, protocol, caps)}
}

func (_c *BrowserManager_Allocate_Call) Run(run func(ctx context.Context, protocol models.BrowserProtocol, caps capabilities.Capabilities)) *BrowserManager_Allocate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.BrowserProtocol), args[2].(capabilities.Capabilities))
	})
	return _c
}

func (_c *BrowserManager_Allocate_Call) Return(_a0 browser.Browser, _a1 error) *BrowserManager_Allocate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BrowserManager_Allocate_Call) RunAndReturn(run func(context.Context, models.BrowserProtocol, capabilities.Capabilities) (browser.Browser, error)) *BrowserManager_Allocate_Call {
	_c.Call.Return(run)
	return _c
}

// NewBrowserManager creates a new instance of BrowserManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBrowserManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *BrowserManager {
	mock := &BrowserManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
