// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	context "context"

	capabilities "github.com/selebrow/selebrow/pkg/capabilities"

	mock "github.com/stretchr/testify/mock"

	session "github.com/selebrow/selebrow/internal/services/session"
)

// SessionService is an autogenerated mock type for the SessionService type
type SessionService struct {
	mock.Mock
}

type SessionService_Expecter struct {
	mock *mock.Mock
}

func (_m *SessionService) EXPECT() *SessionService_Expecter {
	return &SessionService_Expecter{mock: &_m.Mock}
}

// CreateSession provides a mock function with given fields: ctx, caps
func (_m *SessionService) CreateSession(ctx context.Context, caps capabilities.Capabilities) (*session.Session, error) {
	ret := _m.Called(ctx, caps)

	if len(ret) == 0 {
		panic("no return value specified for CreateSession")
	}

	var r0 *session.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, capabilities.Capabilities) (*session.Session, error)); ok {
		return rf(ctx, caps)
	}
	if rf, ok := ret.Get(0).(func(context.Context, capabilities.Capabilities) *session.Session); ok {
		r0 = rf(ctx, caps)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*session.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, capabilities.Capabilities) error); ok {
		r1 = rf(ctx, caps)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionService_CreateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSession'
type SessionService_CreateSession_Call struct {
	*mock.Call
}

// CreateSession is a helper method to define mock.On call
//   - ctx context.Context
//   - caps capabilities.Capabilities
func (_e *SessionService_Expecter) CreateSession(ctx interface{}, caps interface{}) *SessionService_CreateSession_Call {
	return &SessionService_CreateSession_Call{Call: _e.mock.On("CreateSession", ctx, caps)}
}

func (_c *SessionService_CreateSession_Call) Run(run func(ctx context.Context, caps capabilities.Capabilities)) *SessionService_CreateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(capabilities.Capabilities))
	})
	return _c
}

func (_c *SessionService_CreateSession_Call) Return(_a0 *session.Session, _a1 error) *SessionService_CreateSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SessionService_CreateSession_Call) RunAndReturn(run func(context.Context, capabilities.Capabilities) (*session.Session, error)) *SessionService_CreateSession_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSession provides a mock function with given fields: sess
func (_m *SessionService) DeleteSession(sess *session.Session) {
	_m.Called(sess)
}

// SessionService_DeleteSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSession'
type SessionService_DeleteSession_Call struct {
	*mock.Call
}

// DeleteSession is a helper method to define mock.On call
//   - sess *session.Session
func (_e *SessionService_Expecter) DeleteSession(sess interface{}) *SessionService_DeleteSession_Call {
	return &SessionService_DeleteSession_Call{Call: _e.mock.On("DeleteSession", sess)}
}

func (_c *SessionService_DeleteSession_Call) Run(run func(sess *session.Session)) *SessionService_DeleteSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*session.Session))
	})
	return _c
}

func (_c *SessionService_DeleteSession_Call) Return() *SessionService_DeleteSession_Call {
	_c.Call.Return()
	return _c
}

func (_c *SessionService_DeleteSession_Call) RunAndReturn(run func(*session.Session)) *SessionService_DeleteSession_Call {
	_c.Run(run)
	return _c
}

// FindSession provides a mock function with given fields: id
func (_m *SessionService) FindSession(id string) (*session.Session, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindSession")
	}

	var r0 *session.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*session.Session, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *session.Session); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*session.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionService_FindSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindSession'
type SessionService_FindSession_Call struct {
	*mock.Call
}

// FindSession is a helper method to define mock.On call
//   - id string
func (_e *SessionService_Expecter) FindSession(id interface{}) *SessionService_FindSession_Call {
	return &SessionService_FindSession_Call{Call: _e.mock.On("FindSession", id)}
}

func (_c *SessionService_FindSession_Call) Run(run func(id string)) *SessionService_FindSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *SessionService_FindSession_Call) Return(_a0 *session.Session, _a1 error) *SessionService_FindSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SessionService_FindSession_Call) RunAndReturn(run func(string) (*session.Session, error)) *SessionService_FindSession_Call {
	_c.Call.Return(run)
	return _c
}

// ListSessions provides a mock function with no fields
func (_m *SessionService) ListSessions() []*session.Session {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListSessions")
	}

	var r0 []*session.Session
	if rf, ok := ret.Get(0).(func() []*session.Session); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*session.Session)
		}
	}

	return r0
}

// SessionService_ListSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSessions'
type SessionService_ListSessions_Call struct {
	*mock.Call
}

// ListSessions is a helper method to define mock.On call
func (_e *SessionService_Expecter) ListSessions() *SessionService_ListSessions_Call {
	return &SessionService_ListSessions_Call{Call: _e.mock.On("ListSessions")}
}

func (_c *SessionService_ListSessions_Call) Run(run func()) *SessionService_ListSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SessionService_ListSessions_Call) Return(_a0 []*session.Session) *SessionService_ListSessions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionService_ListSessions_Call) RunAndReturn(run func() []*session.Session) *SessionService_ListSessions_Call {
	_c.Call.Return(run)
	return _c
}

// NewSessionService creates a new instance of SessionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSessionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *SessionService {
	mock := &SessionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
