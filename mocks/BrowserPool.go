// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	browser "github.com/selebrow/selebrow/pkg/browser"
	capabilities "github.com/selebrow/selebrow/pkg/capabilities"

	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/selebrow/selebrow/pkg/models"
)

// BrowserPool is an autogenerated mock type for the BrowserPool type
type BrowserPool struct {
	mock.Mock
}

type BrowserPool_Expecter struct {
	mock *mock.Mock
}

func (_m *BrowserPool) EXPECT() *BrowserPool_Expecter {
	return &BrowserPool_Expecter{mock: &_m.Mock}
}

// Checkout provides a mock function with given fields: ctx, protocol, caps
func (_m *BrowserPool) Checkout(ctx context.Context, protocol models.BrowserProtocol, caps capabilities.Capabilities) (browser.Browser, error) {
	ret := _m.Called(ctx, protocol, caps)

	if len(ret) == 0 {
		panic("no return value specified for Checkout")
	}

	var r0 browser.Browser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.BrowserProtocol, capabilities.Capabilities) (browser.Browser, error)); ok {
		return rf(ctx, protocol, caps)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.BrowserProtocol, capabilities.Capabilities) browser.Browser); ok {
		r0 = rf(ctx, protocol, caps)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(browser.Browser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.BrowserProtocol, capabilities.Capabilities) error); ok {
		r1 = rf(ctx, protocol, caps)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BrowserPool_Checkout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Checkout'
type BrowserPool_Checkout_Call struct {
	*mock.Call
}

// Checkout is a helper method to define mock.On call
//   - ctx context.Context
//   - protocol models.BrowserProtocol
//   - caps capabilities.Capabilities
func (_e *BrowserPool_Expecter) Checkout(ctx interface{}, protocol interface{}, caps interface{}) *BrowserPool_Checkout_Call {
	return &BrowserPool_Checkout_Call{Call: _e.mock.On("Checkout", ctx, protocol, caps)}
}

func (_c *BrowserPool_Checkout_Call) Run(run func(ctx context.Context, protocol models.BrowserProtocol, caps capabilities.Capabilities)) *BrowserPool_Checkout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.BrowserProtocol), args[2].(capabilities.Capabilities))
	})
	return _c
}

func (_c *BrowserPool_Checkout_Call) Return(_a0 browser.Browser, _a1 error) *BrowserPool_Checkout_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BrowserPool_Checkout_Call) RunAndReturn(run func(context.Context, models.BrowserProtocol, capabilities.Capabilities) (browser.Browser, error)) *BrowserPool_Checkout_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function with given fields: ctx
func (_m *BrowserPool) Shutdown(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BrowserPool_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type BrowserPool_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
//   - ctx context.Context
func (_e *BrowserPool_Expecter) Shutdown(ctx interface{}) *BrowserPool_Shutdown_Call {
	return &BrowserPool_Shutdown_Call{Call: _e.mock.On("Shutdown", ctx)}
}

func (_c *BrowserPool_Shutdown_Call) Run(run func(ctx context.Context)) *BrowserPool_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *BrowserPool_Shutdown_Call) Return(_a0 error) *BrowserPool_Shutdown_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BrowserPool_Shutdown_Call) RunAndReturn(run func(context.Context) error) *BrowserPool_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// NewBrowserPool creates a new instance of BrowserPool. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBrowserPool(t interface {
	mock.TestingT
	Cleanup(func())
}) *BrowserPool {
	mock := &BrowserPool{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
