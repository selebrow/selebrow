// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"
)

// InfoController is an autogenerated mock type for the InfoController type
type InfoController struct {
	mock.Mock
}

type InfoController_Expecter struct {
	mock *mock.Mock
}

func (_m *InfoController) EXPECT() *InfoController_Expecter {
	return &InfoController_Expecter{mock: &_m.Mock}
}

// Info provides a mock function with given fields: c
func (_m *InfoController) Info(c echo.Context) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for Info")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InfoController_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type InfoController_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - c echo.Context
func (_e *InfoController_Expecter) Info(c interface{}) *InfoController_Info_Call {
	return &InfoController_Info_Call{Call: _e.mock.On("Info", c)}
}

func (_c *InfoController_Info_Call) Run(run func(c echo.Context)) *InfoController_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *InfoController_Info_Call) Return(_a0 error) *InfoController_Info_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InfoController_Info_Call) RunAndReturn(run func(echo.Context) error) *InfoController_Info_Call {
	_c.Call.Return(run)
	return _c
}

// NewInfoController creates a new instance of InfoController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInfoController(t interface {
	mock.TestingT
	Cleanup(func())
}) *InfoController {
	mock := &InfoController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
