// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	config "github.com/selebrow/selebrow/pkg/config"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Config is an autogenerated mock type for the Config type
type Config struct {
	mock.Mock
}

type Config_Expecter struct {
	mock *mock.Mock
}

func (_m *Config) EXPECT() *Config_Expecter {
	return &Config_Expecter{mock: &_m.Mock}
}

// Backend provides a mock function with no fields
func (_m *Config) Backend() config.BackendType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Backend")
	}

	var r0 config.BackendType
	if rf, ok := ret.Get(0).(func() config.BackendType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(config.BackendType)
	}

	return r0
}

// Config_Backend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Backend'
type Config_Backend_Call struct {
	*mock.Call
}

// Backend is a helper method to define mock.On call
func (_e *Config_Expecter) Backend() *Config_Backend_Call {
	return &Config_Backend_Call{Call: _e.mock.On("Backend")}
}

func (_c *Config_Backend_Call) Run(run func()) *Config_Backend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_Backend_Call) Return(_a0 config.BackendType) *Config_Backend_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_Backend_Call) RunAndReturn(run func() config.BackendType) *Config_Backend_Call {
	_c.Call.Return(run)
	return _c
}

// BrowsersURI provides a mock function with no fields
func (_m *Config) BrowsersURI() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BrowsersURI")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Config_BrowsersURI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BrowsersURI'
type Config_BrowsersURI_Call struct {
	*mock.Call
}

// BrowsersURI is a helper method to define mock.On call
func (_e *Config_Expecter) BrowsersURI() *Config_BrowsersURI_Call {
	return &Config_BrowsersURI_Call{Call: _e.mock.On("BrowsersURI")}
}

func (_c *Config_BrowsersURI_Call) Run(run func()) *Config_BrowsersURI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_BrowsersURI_Call) Return(_a0 []string) *Config_BrowsersURI_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_BrowsersURI_Call) RunAndReturn(run func() []string) *Config_BrowsersURI_Call {
	_c.Call.Return(run)
	return _c
}

// ConnectTimeout provides a mock function with no fields
func (_m *Config) ConnectTimeout() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ConnectTimeout")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// Config_ConnectTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConnectTimeout'
type Config_ConnectTimeout_Call struct {
	*mock.Call
}

// ConnectTimeout is a helper method to define mock.On call
func (_e *Config_Expecter) ConnectTimeout() *Config_ConnectTimeout_Call {
	return &Config_ConnectTimeout_Call{Call: _e.mock.On("ConnectTimeout")}
}

func (_c *Config_ConnectTimeout_Call) Run(run func()) *Config_ConnectTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_ConnectTimeout_Call) Return(_a0 time.Duration) *Config_ConnectTimeout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_ConnectTimeout_Call) RunAndReturn(run func() time.Duration) *Config_ConnectTimeout_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRetries provides a mock function with no fields
func (_m *Config) CreateRetries() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateRetries")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Config_CreateRetries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRetries'
type Config_CreateRetries_Call struct {
	*mock.Call
}

// CreateRetries is a helper method to define mock.On call
func (_e *Config_Expecter) CreateRetries() *Config_CreateRetries_Call {
	return &Config_CreateRetries_Call{Call: _e.mock.On("CreateRetries")}
}

func (_c *Config_CreateRetries_Call) Run(run func()) *Config_CreateRetries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_CreateRetries_Call) Return(_a0 int) *Config_CreateRetries_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_CreateRetries_Call) RunAndReturn(run func() int) *Config_CreateRetries_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTimeout provides a mock function with no fields
func (_m *Config) CreateTimeout() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateTimeout")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// Config_CreateTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTimeout'
type Config_CreateTimeout_Call struct {
	*mock.Call
}

// CreateTimeout is a helper method to define mock.On call
func (_e *Config_Expecter) CreateTimeout() *Config_CreateTimeout_Call {
	return &Config_CreateTimeout_Call{Call: _e.mock.On("CreateTimeout")}
}

func (_c *Config_CreateTimeout_Call) Run(run func()) *Config_CreateTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_CreateTimeout_Call) Return(_a0 time.Duration) *Config_CreateTimeout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_CreateTimeout_Call) RunAndReturn(run func() time.Duration) *Config_CreateTimeout_Call {
	_c.Call.Return(run)
	return _c
}

// DockerNetwork provides a mock function with no fields
func (_m *Config) DockerNetwork() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DockerNetwork")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Config_DockerNetwork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DockerNetwork'
type Config_DockerNetwork_Call struct {
	*mock.Call
}

// DockerNetwork is a helper method to define mock.On call
func (_e *Config_Expecter) DockerNetwork() *Config_DockerNetwork_Call {
	return &Config_DockerNetwork_Call{Call: _e.mock.On("DockerNetwork")}
}

func (_c *Config_DockerNetwork_Call) Run(run func()) *Config_DockerNetwork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_DockerNetwork_Call) Return(_a0 string) *Config_DockerNetwork_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_DockerNetwork_Call) RunAndReturn(run func() string) *Config_DockerNetwork_Call {
	_c.Call.Return(run)
	return _c
}

// DockerPlatform provides a mock function with no fields
func (_m *Config) DockerPlatform() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DockerPlatform")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Config_DockerPlatform_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DockerPlatform'
type Config_DockerPlatform_Call struct {
	*mock.Call
}

// DockerPlatform is a helper method to define mock.On call
func (_e *Config_Expecter) DockerPlatform() *Config_DockerPlatform_Call {
	return &Config_DockerPlatform_Call{Call: _e.mock.On("DockerPlatform")}
}

func (_c *Config_DockerPlatform_Call) Run(run func()) *Config_DockerPlatform_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_DockerPlatform_Call) Return(_a0 string) *Config_DockerPlatform_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_DockerPlatform_Call) RunAndReturn(run func() string) *Config_DockerPlatform_Call {
	_c.Call.Return(run)
	return _c
}

// DockerPortMapping provides a mock function with no fields
func (_m *Config) DockerPortMapping() config.PortMappingMode {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DockerPortMapping")
	}

	var r0 config.PortMappingMode
	if rf, ok := ret.Get(0).(func() config.PortMappingMode); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(config.PortMappingMode)
	}

	return r0
}

// Config_DockerPortMapping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DockerPortMapping'
type Config_DockerPortMapping_Call struct {
	*mock.Call
}

// DockerPortMapping is a helper method to define mock.On call
func (_e *Config_Expecter) DockerPortMapping() *Config_DockerPortMapping_Call {
	return &Config_DockerPortMapping_Call{Call: _e.mock.On("DockerPortMapping")}
}

func (_c *Config_DockerPortMapping_Call) Run(run func()) *Config_DockerPortMapping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_DockerPortMapping_Call) Return(_a0 config.PortMappingMode) *Config_DockerPortMapping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_DockerPortMapping_Call) RunAndReturn(run func() config.PortMappingMode) *Config_DockerPortMapping_Call {
	_c.Call.Return(run)
	return _c
}

// DockerPrivileged provides a mock function with no fields
func (_m *Config) DockerPrivileged() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DockerPrivileged")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Config_DockerPrivileged_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DockerPrivileged'
type Config_DockerPrivileged_Call struct {
	*mock.Call
}

// DockerPrivileged is a helper method to define mock.On call
func (_e *Config_Expecter) DockerPrivileged() *Config_DockerPrivileged_Call {
	return &Config_DockerPrivileged_Call{Call: _e.mock.On("DockerPrivileged")}
}

func (_c *Config_DockerPrivileged_Call) Run(run func()) *Config_DockerPrivileged_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_DockerPrivileged_Call) Return(_a0 bool) *Config_DockerPrivileged_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_DockerPrivileged_Call) RunAndReturn(run func() bool) *Config_DockerPrivileged_Call {
	_c.Call.Return(run)
	return _c
}

// DockerPullImages provides a mock function with no fields
func (_m *Config) DockerPullImages() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DockerPullImages")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Config_DockerPullImages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DockerPullImages'
type Config_DockerPullImages_Call struct {
	*mock.Call
}

// DockerPullImages is a helper method to define mock.On call
func (_e *Config_Expecter) DockerPullImages() *Config_DockerPullImages_Call {
	return &Config_DockerPullImages_Call{Call: _e.mock.On("DockerPullImages")}
}

func (_c *Config_DockerPullImages_Call) Run(run func()) *Config_DockerPullImages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_DockerPullImages_Call) Return(_a0 bool) *Config_DockerPullImages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_DockerPullImages_Call) RunAndReturn(run func() bool) *Config_DockerPullImages_Call {
	_c.Call.Return(run)
	return _c
}

// IdleTimeout provides a mock function with no fields
func (_m *Config) IdleTimeout() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IdleTimeout")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// Config_IdleTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IdleTimeout'
type Config_IdleTimeout_Call struct {
	*mock.Call
}

// IdleTimeout is a helper method to define mock.On call
func (_e *Config_Expecter) IdleTimeout() *Config_IdleTimeout_Call {
	return &Config_IdleTimeout_Call{Call: _e.mock.On("IdleTimeout")}
}

func (_c *Config_IdleTimeout_Call) Run(run func()) *Config_IdleTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_IdleTimeout_Call) Return(_a0 time.Duration) *Config_IdleTimeout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_IdleTimeout_Call) RunAndReturn(run func() time.Duration) *Config_IdleTimeout_Call {
	_c.Call.Return(run)
	return _c
}

// JobID provides a mock function with no fields
func (_m *Config) JobID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for JobID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Config_JobID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JobID'
type Config_JobID_Call struct {
	*mock.Call
}

// JobID is a helper method to define mock.On call
func (_e *Config_Expecter) JobID() *Config_JobID_Call {
	return &Config_JobID_Call{Call: _e.mock.On("JobID")}
}

func (_c *Config_JobID_Call) Run(run func()) *Config_JobID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_JobID_Call) Return(_a0 string) *Config_JobID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_JobID_Call) RunAndReturn(run func() string) *Config_JobID_Call {
	_c.Call.Return(run)
	return _c
}

// KubeClusterModeOut provides a mock function with no fields
func (_m *Config) KubeClusterModeOut() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for KubeClusterModeOut")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Config_KubeClusterModeOut_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KubeClusterModeOut'
type Config_KubeClusterModeOut_Call struct {
	*mock.Call
}

// KubeClusterModeOut is a helper method to define mock.On call
func (_e *Config_Expecter) KubeClusterModeOut() *Config_KubeClusterModeOut_Call {
	return &Config_KubeClusterModeOut_Call{Call: _e.mock.On("KubeClusterModeOut")}
}

func (_c *Config_KubeClusterModeOut_Call) Run(run func()) *Config_KubeClusterModeOut_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_KubeClusterModeOut_Call) Return(_a0 bool) *Config_KubeClusterModeOut_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_KubeClusterModeOut_Call) RunAndReturn(run func() bool) *Config_KubeClusterModeOut_Call {
	_c.Call.Return(run)
	return _c
}

// KubeConfig provides a mock function with no fields
func (_m *Config) KubeConfig() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for KubeConfig")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Config_KubeConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KubeConfig'
type Config_KubeConfig_Call struct {
	*mock.Call
}

// KubeConfig is a helper method to define mock.On call
func (_e *Config_Expecter) KubeConfig() *Config_KubeConfig_Call {
	return &Config_KubeConfig_Call{Call: _e.mock.On("KubeConfig")}
}

func (_c *Config_KubeConfig_Call) Run(run func()) *Config_KubeConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_KubeConfig_Call) Return(_a0 string) *Config_KubeConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_KubeConfig_Call) RunAndReturn(run func() string) *Config_KubeConfig_Call {
	_c.Call.Return(run)
	return _c
}

// KubeTemplatesPath provides a mock function with no fields
func (_m *Config) KubeTemplatesPath() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for KubeTemplatesPath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Config_KubeTemplatesPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KubeTemplatesPath'
type Config_KubeTemplatesPath_Call struct {
	*mock.Call
}

// KubeTemplatesPath is a helper method to define mock.On call
func (_e *Config_Expecter) KubeTemplatesPath() *Config_KubeTemplatesPath_Call {
	return &Config_KubeTemplatesPath_Call{Call: _e.mock.On("KubeTemplatesPath")}
}

func (_c *Config_KubeTemplatesPath_Call) Run(run func()) *Config_KubeTemplatesPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_KubeTemplatesPath_Call) Return(_a0 string) *Config_KubeTemplatesPath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_KubeTemplatesPath_Call) RunAndReturn(run func() string) *Config_KubeTemplatesPath_Call {
	_c.Call.Return(run)
	return _c
}

// Lineage provides a mock function with no fields
func (_m *Config) Lineage() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Lineage")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Config_Lineage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Lineage'
type Config_Lineage_Call struct {
	*mock.Call
}

// Lineage is a helper method to define mock.On call
func (_e *Config_Expecter) Lineage() *Config_Lineage_Call {
	return &Config_Lineage_Call{Call: _e.mock.On("Lineage")}
}

func (_c *Config_Lineage_Call) Run(run func()) *Config_Lineage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_Lineage_Call) Return(_a0 string) *Config_Lineage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_Lineage_Call) RunAndReturn(run func() string) *Config_Lineage_Call {
	_c.Call.Return(run)
	return _c
}

// Listen provides a mock function with no fields
func (_m *Config) Listen() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Listen")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Config_Listen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Listen'
type Config_Listen_Call struct {
	*mock.Call
}

// Listen is a helper method to define mock.On call
func (_e *Config_Expecter) Listen() *Config_Listen_Call {
	return &Config_Listen_Call{Call: _e.mock.On("Listen")}
}

func (_c *Config_Listen_Call) Run(run func()) *Config_Listen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_Listen_Call) Return(_a0 string) *Config_Listen_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_Listen_Call) RunAndReturn(run func() string) *Config_Listen_Call {
	_c.Call.Return(run)
	return _c
}

// MaxAge provides a mock function with no fields
func (_m *Config) MaxAge() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MaxAge")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// Config_MaxAge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MaxAge'
type Config_MaxAge_Call struct {
	*mock.Call
}

// MaxAge is a helper method to define mock.On call
func (_e *Config_Expecter) MaxAge() *Config_MaxAge_Call {
	return &Config_MaxAge_Call{Call: _e.mock.On("MaxAge")}
}

func (_c *Config_MaxAge_Call) Run(run func()) *Config_MaxAge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_MaxAge_Call) Return(_a0 time.Duration) *Config_MaxAge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_MaxAge_Call) RunAndReturn(run func() time.Duration) *Config_MaxAge_Call {
	_c.Call.Return(run)
	return _c
}

// MaxIdle provides a mock function with no fields
func (_m *Config) MaxIdle() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MaxIdle")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Config_MaxIdle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MaxIdle'
type Config_MaxIdle_Call struct {
	*mock.Call
}

// MaxIdle is a helper method to define mock.On call
func (_e *Config_Expecter) MaxIdle() *Config_MaxIdle_Call {
	return &Config_MaxIdle_Call{Call: _e.mock.On("MaxIdle")}
}

func (_c *Config_MaxIdle_Call) Run(run func()) *Config_MaxIdle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_MaxIdle_Call) Return(_a0 int) *Config_MaxIdle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_MaxIdle_Call) RunAndReturn(run func() int) *Config_MaxIdle_Call {
	_c.Call.Return(run)
	return _c
}

// Namespace provides a mock function with no fields
func (_m *Config) Namespace() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Namespace")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Config_Namespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Namespace'
type Config_Namespace_Call struct {
	*mock.Call
}

// Namespace is a helper method to define mock.On call
func (_e *Config_Expecter) Namespace() *Config_Namespace_Call {
	return &Config_Namespace_Call{Call: _e.mock.On("Namespace")}
}

func (_c *Config_Namespace_Call) Run(run func()) *Config_Namespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_Namespace_Call) Return(_a0 string) *Config_Namespace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_Namespace_Call) RunAndReturn(run func() string) *Config_Namespace_Call {
	_c.Call.Return(run)
	return _c
}

// ProjectName provides a mock function with no fields
func (_m *Config) ProjectName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ProjectName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Config_ProjectName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProjectName'
type Config_ProjectName_Call struct {
	*mock.Call
}

// ProjectName is a helper method to define mock.On call
func (_e *Config_Expecter) ProjectName() *Config_ProjectName_Call {
	return &Config_ProjectName_Call{Call: _e.mock.On("ProjectName")}
}

func (_c *Config_ProjectName_Call) Run(run func()) *Config_ProjectName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_ProjectName_Call) Return(_a0 string) *Config_ProjectName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_ProjectName_Call) RunAndReturn(run func() string) *Config_ProjectName_Call {
	_c.Call.Return(run)
	return _c
}

// ProjectNamespace provides a mock function with no fields
func (_m *Config) ProjectNamespace() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ProjectNamespace")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Config_ProjectNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProjectNamespace'
type Config_ProjectNamespace_Call struct {
	*mock.Call
}

// ProjectNamespace is a helper method to define mock.On call
func (_e *Config_Expecter) ProjectNamespace() *Config_ProjectNamespace_Call {
	return &Config_ProjectNamespace_Call{Call: _e.mock.On("ProjectNamespace")}
}

func (_c *Config_ProjectNamespace_Call) Run(run func()) *Config_ProjectNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_ProjectNamespace_Call) Return(_a0 string) *Config_ProjectNamespace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_ProjectNamespace_Call) RunAndReturn(run func() string) *Config_ProjectNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// ProxyDelete provides a mock function with no fields
func (_m *Config) ProxyDelete() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ProxyDelete")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Config_ProxyDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProxyDelete'
type Config_ProxyDelete_Call struct {
	*mock.Call
}

// ProxyDelete is a helper method to define mock.On call
func (_e *Config_Expecter) ProxyDelete() *Config_ProxyDelete_Call {
	return &Config_ProxyDelete_Call{Call: _e.mock.On("ProxyDelete")}
}

func (_c *Config_ProxyDelete_Call) Run(run func()) *Config_ProxyDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_ProxyDelete_Call) Return(_a0 bool) *Config_ProxyDelete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_ProxyDelete_Call) RunAndReturn(run func() bool) *Config_ProxyDelete_Call {
	_c.Call.Return(run)
	return _c
}

// QueueSize provides a mock function with no fields
func (_m *Config) QueueSize() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for QueueSize")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Config_QueueSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueueSize'
type Config_QueueSize_Call struct {
	*mock.Call
}

// QueueSize is a helper method to define mock.On call
func (_e *Config_Expecter) QueueSize() *Config_QueueSize_Call {
	return &Config_QueueSize_Call{Call: _e.mock.On("QueueSize")}
}

func (_c *Config_QueueSize_Call) Run(run func()) *Config_QueueSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_QueueSize_Call) Return(_a0 int) *Config_QueueSize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_QueueSize_Call) RunAndReturn(run func() int) *Config_QueueSize_Call {
	_c.Call.Return(run)
	return _c
}

// QueueTimeout provides a mock function with no fields
func (_m *Config) QueueTimeout() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for QueueTimeout")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// Config_QueueTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueueTimeout'
type Config_QueueTimeout_Call struct {
	*mock.Call
}

// QueueTimeout is a helper method to define mock.On call
func (_e *Config_Expecter) QueueTimeout() *Config_QueueTimeout_Call {
	return &Config_QueueTimeout_Call{Call: _e.mock.On("QueueTimeout")}
}

func (_c *Config_QueueTimeout_Call) Run(run func()) *Config_QueueTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_QueueTimeout_Call) Return(_a0 time.Duration) *Config_QueueTimeout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_QueueTimeout_Call) RunAndReturn(run func() time.Duration) *Config_QueueTimeout_Call {
	_c.Call.Return(run)
	return _c
}

// QuotaLimit provides a mock function with no fields
func (_m *Config) QuotaLimit() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for QuotaLimit")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Config_QuotaLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QuotaLimit'
type Config_QuotaLimit_Call struct {
	*mock.Call
}

// QuotaLimit is a helper method to define mock.On call
func (_e *Config_Expecter) QuotaLimit() *Config_QuotaLimit_Call {
	return &Config_QuotaLimit_Call{Call: _e.mock.On("QuotaLimit")}
}

func (_c *Config_QuotaLimit_Call) Run(run func()) *Config_QuotaLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_QuotaLimit_Call) Return(_a0 int) *Config_QuotaLimit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_QuotaLimit_Call) RunAndReturn(run func() int) *Config_QuotaLimit_Call {
	_c.Call.Return(run)
	return _c
}

// UI provides a mock function with no fields
func (_m *Config) UI() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UI")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Config_UI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UI'
type Config_UI_Call struct {
	*mock.Call
}

// UI is a helper method to define mock.On call
func (_e *Config_Expecter) UI() *Config_UI_Call {
	return &Config_UI_Call{Call: _e.mock.On("UI")}
}

func (_c *Config_UI_Call) Run(run func()) *Config_UI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_UI_Call) Return(_a0 bool) *Config_UI_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_UI_Call) RunAndReturn(run func() bool) *Config_UI_Call {
	_c.Call.Return(run)
	return _c
}

// VNCPassword provides a mock function with no fields
func (_m *Config) VNCPassword() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for VNCPassword")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Config_VNCPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VNCPassword'
type Config_VNCPassword_Call struct {
	*mock.Call
}

// VNCPassword is a helper method to define mock.On call
func (_e *Config_Expecter) VNCPassword() *Config_VNCPassword_Call {
	return &Config_VNCPassword_Call{Call: _e.mock.On("VNCPassword")}
}

func (_c *Config_VNCPassword_Call) Run(run func()) *Config_VNCPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_VNCPassword_Call) Return(_a0 string) *Config_VNCPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Config_VNCPassword_Call) RunAndReturn(run func() string) *Config_VNCPassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewConfig creates a new instance of Config. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *Config {
	mock := &Config{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
