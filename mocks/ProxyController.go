// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"

	models "github.com/selebrow/selebrow/pkg/models"
)

// ProxyController is an autogenerated mock type for the ProxyController type
type ProxyController struct {
	mock.Mock
}

type ProxyController_Expecter struct {
	mock *mock.Mock
}

func (_m *ProxyController) EXPECT() *ProxyController_Expecter {
	return &ProxyController_Expecter{mock: &_m.Mock}
}

// Proxy provides a mock function with given fields: c
func (_m *ProxyController) Proxy(c echo.Context) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for Proxy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProxyController_Proxy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Proxy'
type ProxyController_Proxy_Call struct {
	*mock.Call
}

// Proxy is a helper method to define mock.On call
//   - c echo.Context
func (_e *ProxyController_Expecter) Proxy(c interface{}) *ProxyController_Proxy_Call {
	return &ProxyController_Proxy_Call{Call: _e.mock.On("Proxy", c)}
}

func (_c *ProxyController_Proxy_Call) Run(run func(c echo.Context)) *ProxyController_Proxy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *ProxyController_Proxy_Call) Return(_a0 error) *ProxyController_Proxy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProxyController_Proxy_Call) RunAndReturn(run func(echo.Context) error) *ProxyController_Proxy_Call {
	_c.Call.Return(run)
	return _c
}

// RewriteProxyUrl provides a mock function with given fields: next
func (_m *ProxyController) RewriteProxyUrl(next echo.HandlerFunc) echo.HandlerFunc {
	ret := _m.Called(next)

	if len(ret) == 0 {
		panic("no return value specified for RewriteProxyUrl")
	}

	var r0 echo.HandlerFunc
	if rf, ok := ret.Get(0).(func(echo.HandlerFunc) echo.HandlerFunc); ok {
		r0 = rf(next)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(echo.HandlerFunc)
		}
	}

	return r0
}

// ProxyController_RewriteProxyUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RewriteProxyUrl'
type ProxyController_RewriteProxyUrl_Call struct {
	*mock.Call
}

// RewriteProxyUrl is a helper method to define mock.On call
//   - next echo.HandlerFunc
func (_e *ProxyController_Expecter) RewriteProxyUrl(next interface{}) *ProxyController_RewriteProxyUrl_Call {
	return &ProxyController_RewriteProxyUrl_Call{Call: _e.mock.On("RewriteProxyUrl", next)}
}

func (_c *ProxyController_RewriteProxyUrl_Call) Run(run func(next echo.HandlerFunc)) *ProxyController_RewriteProxyUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.HandlerFunc))
	})
	return _c
}

func (_c *ProxyController_RewriteProxyUrl_Call) Return(_a0 echo.HandlerFunc) *ProxyController_RewriteProxyUrl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProxyController_RewriteProxyUrl_Call) RunAndReturn(run func(echo.HandlerFunc) echo.HandlerFunc) *ProxyController_RewriteProxyUrl_Call {
	_c.Call.Return(run)
	return _c
}

// SetPortProxyURL provides a mock function with given fields: port
func (_m *ProxyController) SetPortProxyURL(port models.ContainerPort) echo.MiddlewareFunc {
	ret := _m.Called(port)

	if len(ret) == 0 {
		panic("no return value specified for SetPortProxyURL")
	}

	var r0 echo.MiddlewareFunc
	if rf, ok := ret.Get(0).(func(models.ContainerPort) echo.MiddlewareFunc); ok {
		r0 = rf(port)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(echo.MiddlewareFunc)
		}
	}

	return r0
}

// ProxyController_SetPortProxyURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPortProxyURL'
type ProxyController_SetPortProxyURL_Call struct {
	*mock.Call
}

// SetPortProxyURL is a helper method to define mock.On call
//   - port models.ContainerPort
func (_e *ProxyController_Expecter) SetPortProxyURL(port interface{}) *ProxyController_SetPortProxyURL_Call {
	return &ProxyController_SetPortProxyURL_Call{Call: _e.mock.On("SetPortProxyURL", port)}
}

func (_c *ProxyController_SetPortProxyURL_Call) Run(run func(port models.ContainerPort)) *ProxyController_SetPortProxyURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.ContainerPort))
	})
	return _c
}

func (_c *ProxyController_SetPortProxyURL_Call) Return(_a0 echo.MiddlewareFunc) *ProxyController_SetPortProxyURL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProxyController_SetPortProxyURL_Call) RunAndReturn(run func(models.ContainerPort) echo.MiddlewareFunc) *ProxyController_SetPortProxyURL_Call {
	_c.Call.Return(run)
	return _c
}

// SetProxyURL provides a mock function with given fields: next
func (_m *ProxyController) SetProxyURL(next echo.HandlerFunc) echo.HandlerFunc {
	ret := _m.Called(next)

	if len(ret) == 0 {
		panic("no return value specified for SetProxyURL")
	}

	var r0 echo.HandlerFunc
	if rf, ok := ret.Get(0).(func(echo.HandlerFunc) echo.HandlerFunc); ok {
		r0 = rf(next)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(echo.HandlerFunc)
		}
	}

	return r0
}

// ProxyController_SetProxyURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetProxyURL'
type ProxyController_SetProxyURL_Call struct {
	*mock.Call
}

// SetProxyURL is a helper method to define mock.On call
//   - next echo.HandlerFunc
func (_e *ProxyController_Expecter) SetProxyURL(next interface{}) *ProxyController_SetProxyURL_Call {
	return &ProxyController_SetProxyURL_Call{Call: _e.mock.On("SetProxyURL", next)}
}

func (_c *ProxyController_SetProxyURL_Call) Run(run func(next echo.HandlerFunc)) *ProxyController_SetProxyURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.HandlerFunc))
	})
	return _c
}

func (_c *ProxyController_SetProxyURL_Call) Return(_a0 echo.HandlerFunc) *ProxyController_SetProxyURL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProxyController_SetProxyURL_Call) RunAndReturn(run func(echo.HandlerFunc) echo.HandlerFunc) *ProxyController_SetProxyURL_Call {
	_c.Call.Return(run)
	return _c
}

// VNCProxy provides a mock function with given fields: c
func (_m *ProxyController) VNCProxy(c echo.Context) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for VNCProxy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProxyController_VNCProxy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VNCProxy'
type ProxyController_VNCProxy_Call struct {
	*mock.Call
}

// VNCProxy is a helper method to define mock.On call
//   - c echo.Context
func (_e *ProxyController_Expecter) VNCProxy(c interface{}) *ProxyController_VNCProxy_Call {
	return &ProxyController_VNCProxy_Call{Call: _e.mock.On("VNCProxy", c)}
}

func (_c *ProxyController_VNCProxy_Call) Run(run func(c echo.Context)) *ProxyController_VNCProxy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *ProxyController_VNCProxy_Call) Return(_a0 error) *ProxyController_VNCProxy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProxyController_VNCProxy_Call) RunAndReturn(run func(echo.Context) error) *ProxyController_VNCProxy_Call {
	_c.Call.Return(run)
	return _c
}

// NewProxyController creates a new instance of ProxyController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProxyController(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProxyController {
	mock := &ProxyController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
