// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"
)

// PWController is an autogenerated mock type for the PWController type
type PWController struct {
	mock.Mock
}

type PWController_Expecter struct {
	mock *mock.Mock
}

func (_m *PWController) EXPECT() *PWController_Expecter {
	return &PWController_Expecter{mock: &_m.Mock}
}

// CreateSession provides a mock function with given fields: c
func (_m *PWController) CreateSession(c echo.Context) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for CreateSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PWController_CreateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSession'
type PWController_CreateSession_Call struct {
	*mock.Call
}

// CreateSession is a helper method to define mock.On call
//   - c echo.Context
func (_e *PWController_Expecter) CreateSession(c interface{}) *PWController_CreateSession_Call {
	return &PWController_CreateSession_Call{Call: _e.mock.On("CreateSession", c)}
}

func (_c *PWController_CreateSession_Call) Run(run func(c echo.Context)) *PWController_CreateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *PWController_CreateSession_Call) Return(_a0 error) *PWController_CreateSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PWController_CreateSession_Call) RunAndReturn(run func(echo.Context) error) *PWController_CreateSession_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateSession provides a mock function with given fields: next
func (_m *PWController) ValidateSession(next echo.HandlerFunc) echo.HandlerFunc {
	ret := _m.Called(next)

	if len(ret) == 0 {
		panic("no return value specified for ValidateSession")
	}

	var r0 echo.HandlerFunc
	if rf, ok := ret.Get(0).(func(echo.HandlerFunc) echo.HandlerFunc); ok {
		r0 = rf(next)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(echo.HandlerFunc)
		}
	}

	return r0
}

// PWController_ValidateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateSession'
type PWController_ValidateSession_Call struct {
	*mock.Call
}

// ValidateSession is a helper method to define mock.On call
//   - next echo.HandlerFunc
func (_e *PWController_Expecter) ValidateSession(next interface{}) *PWController_ValidateSession_Call {
	return &PWController_ValidateSession_Call{Call: _e.mock.On("ValidateSession", next)}
}

func (_c *PWController_ValidateSession_Call) Run(run func(next echo.HandlerFunc)) *PWController_ValidateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.HandlerFunc))
	})
	return _c
}

func (_c *PWController_ValidateSession_Call) Return(_a0 echo.HandlerFunc) *PWController_ValidateSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PWController_ValidateSession_Call) RunAndReturn(run func(echo.HandlerFunc) echo.HandlerFunc) *PWController_ValidateSession_Call {
	_c.Call.Return(run)
	return _c
}

// NewPWController creates a new instance of PWController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPWController(t interface {
	mock.TestingT
	Cleanup(func())
}) *PWController {
	mock := &PWController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
