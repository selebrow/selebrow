// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// QuotaAuthorizer is an autogenerated mock type for the QuotaAuthorizer type
type QuotaAuthorizer struct {
	mock.Mock
}

type QuotaAuthorizer_Expecter struct {
	mock *mock.Mock
}

func (_m *QuotaAuthorizer) EXPECT() *QuotaAuthorizer_Expecter {
	return &QuotaAuthorizer_Expecter{mock: &_m.Mock}
}

// Allocated provides a mock function with no fields
func (_m *QuotaAuthorizer) Allocated() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Allocated")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// QuotaAuthorizer_Allocated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Allocated'
type QuotaAuthorizer_Allocated_Call struct {
	*mock.Call
}

// Allocated is a helper method to define mock.On call
func (_e *QuotaAuthorizer_Expecter) Allocated() *QuotaAuthorizer_Allocated_Call {
	return &QuotaAuthorizer_Allocated_Call{Call: _e.mock.On("Allocated")}
}

func (_c *QuotaAuthorizer_Allocated_Call) Run(run func()) *QuotaAuthorizer_Allocated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *QuotaAuthorizer_Allocated_Call) Return(_a0 int) *QuotaAuthorizer_Allocated_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QuotaAuthorizer_Allocated_Call) RunAndReturn(run func() int) *QuotaAuthorizer_Allocated_Call {
	_c.Call.Return(run)
	return _c
}

// Enabled provides a mock function with no fields
func (_m *QuotaAuthorizer) Enabled() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Enabled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// QuotaAuthorizer_Enabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enabled'
type QuotaAuthorizer_Enabled_Call struct {
	*mock.Call
}

// Enabled is a helper method to define mock.On call
func (_e *QuotaAuthorizer_Expecter) Enabled() *QuotaAuthorizer_Enabled_Call {
	return &QuotaAuthorizer_Enabled_Call{Call: _e.mock.On("Enabled")}
}

func (_c *QuotaAuthorizer_Enabled_Call) Run(run func()) *QuotaAuthorizer_Enabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *QuotaAuthorizer_Enabled_Call) Return(_a0 bool) *QuotaAuthorizer_Enabled_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QuotaAuthorizer_Enabled_Call) RunAndReturn(run func() bool) *QuotaAuthorizer_Enabled_Call {
	_c.Call.Return(run)
	return _c
}

// Limit provides a mock function with no fields
func (_m *QuotaAuthorizer) Limit() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Limit")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// QuotaAuthorizer_Limit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Limit'
type QuotaAuthorizer_Limit_Call struct {
	*mock.Call
}

// Limit is a helper method to define mock.On call
func (_e *QuotaAuthorizer_Expecter) Limit() *QuotaAuthorizer_Limit_Call {
	return &QuotaAuthorizer_Limit_Call{Call: _e.mock.On("Limit")}
}

func (_c *QuotaAuthorizer_Limit_Call) Run(run func()) *QuotaAuthorizer_Limit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *QuotaAuthorizer_Limit_Call) Return(_a0 int) *QuotaAuthorizer_Limit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QuotaAuthorizer_Limit_Call) RunAndReturn(run func() int) *QuotaAuthorizer_Limit_Call {
	_c.Call.Return(run)
	return _c
}

// Release provides a mock function with no fields
func (_m *QuotaAuthorizer) Release() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Release")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// QuotaAuthorizer_Release_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Release'
type QuotaAuthorizer_Release_Call struct {
	*mock.Call
}

// Release is a helper method to define mock.On call
func (_e *QuotaAuthorizer_Expecter) Release() *QuotaAuthorizer_Release_Call {
	return &QuotaAuthorizer_Release_Call{Call: _e.mock.On("Release")}
}

func (_c *QuotaAuthorizer_Release_Call) Run(run func()) *QuotaAuthorizer_Release_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *QuotaAuthorizer_Release_Call) Return(_a0 int) *QuotaAuthorizer_Release_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QuotaAuthorizer_Release_Call) RunAndReturn(run func() int) *QuotaAuthorizer_Release_Call {
	_c.Call.Return(run)
	return _c
}

// Reserve provides a mock function with given fields: ctx
func (_m *QuotaAuthorizer) Reserve(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Reserve")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QuotaAuthorizer_Reserve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reserve'
type QuotaAuthorizer_Reserve_Call struct {
	*mock.Call
}

// Reserve is a helper method to define mock.On call
//   - ctx context.Context
func (_e *QuotaAuthorizer_Expecter) Reserve(ctx interface{}) *QuotaAuthorizer_Reserve_Call {
	return &QuotaAuthorizer_Reserve_Call{Call: _e.mock.On("Reserve", ctx)}
}

func (_c *QuotaAuthorizer_Reserve_Call) Run(run func(ctx context.Context)) *QuotaAuthorizer_Reserve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *QuotaAuthorizer_Reserve_Call) Return(_a0 error) *QuotaAuthorizer_Reserve_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QuotaAuthorizer_Reserve_Call) RunAndReturn(run func(context.Context) error) *QuotaAuthorizer_Reserve_Call {
	_c.Call.Return(run)
	return _c
}

// NewQuotaAuthorizer creates a new instance of QuotaAuthorizer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQuotaAuthorizer(t interface {
	mock.TestingT
	Cleanup(func())
}) *QuotaAuthorizer {
	mock := &QuotaAuthorizer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
