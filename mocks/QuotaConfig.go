// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// QuotaConfig is an autogenerated mock type for the QuotaConfig type
type QuotaConfig struct {
	mock.Mock
}

type QuotaConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *QuotaConfig) EXPECT() *QuotaConfig_Expecter {
	return &QuotaConfig_Expecter{mock: &_m.Mock}
}

// QueueSize provides a mock function with no fields
func (_m *QuotaConfig) QueueSize() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for QueueSize")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// QuotaConfig_QueueSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueueSize'
type QuotaConfig_QueueSize_Call struct {
	*mock.Call
}

// QueueSize is a helper method to define mock.On call
func (_e *QuotaConfig_Expecter) QueueSize() *QuotaConfig_QueueSize_Call {
	return &QuotaConfig_QueueSize_Call{Call: _e.mock.On("QueueSize")}
}

func (_c *QuotaConfig_QueueSize_Call) Run(run func()) *QuotaConfig_QueueSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *QuotaConfig_QueueSize_Call) Return(_a0 int) *QuotaConfig_QueueSize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QuotaConfig_QueueSize_Call) RunAndReturn(run func() int) *QuotaConfig_QueueSize_Call {
	_c.Call.Return(run)
	return _c
}

// QueueTimeout provides a mock function with no fields
func (_m *QuotaConfig) QueueTimeout() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for QueueTimeout")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// QuotaConfig_QueueTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueueTimeout'
type QuotaConfig_QueueTimeout_Call struct {
	*mock.Call
}

// QueueTimeout is a helper method to define mock.On call
func (_e *QuotaConfig_Expecter) QueueTimeout() *QuotaConfig_QueueTimeout_Call {
	return &QuotaConfig_QueueTimeout_Call{Call: _e.mock.On("QueueTimeout")}
}

func (_c *QuotaConfig_QueueTimeout_Call) Run(run func()) *QuotaConfig_QueueTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *QuotaConfig_QueueTimeout_Call) Return(_a0 time.Duration) *QuotaConfig_QueueTimeout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QuotaConfig_QueueTimeout_Call) RunAndReturn(run func() time.Duration) *QuotaConfig_QueueTimeout_Call {
	_c.Call.Return(run)
	return _c
}

// QuotaLimit provides a mock function with no fields
func (_m *QuotaConfig) QuotaLimit() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for QuotaLimit")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// QuotaConfig_QuotaLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QuotaLimit'
type QuotaConfig_QuotaLimit_Call struct {
	*mock.Call
}

// QuotaLimit is a helper method to define mock.On call
func (_e *QuotaConfig_Expecter) QuotaLimit() *QuotaConfig_QuotaLimit_Call {
	return &QuotaConfig_QuotaLimit_Call{Call: _e.mock.On("QuotaLimit")}
}

func (_c *QuotaConfig_QuotaLimit_Call) Run(run func()) *QuotaConfig_QuotaLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *QuotaConfig_QuotaLimit_Call) Return(_a0 int) *QuotaConfig_QuotaLimit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QuotaConfig_QuotaLimit_Call) RunAndReturn(run func() int) *QuotaConfig_QuotaLimit_Call {
	_c.Call.Return(run)
	return _c
}

// NewQuotaConfig creates a new instance of QuotaConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQuotaConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *QuotaConfig {
	mock := &QuotaConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
