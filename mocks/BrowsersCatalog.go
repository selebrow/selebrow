// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	dto "github.com/selebrow/selebrow/pkg/dto"
	mock "github.com/stretchr/testify/mock"

	models "github.com/selebrow/selebrow/pkg/models"
)

// BrowsersCatalog is an autogenerated mock type for the BrowsersCatalog type
type BrowsersCatalog struct {
	mock.Mock
}

type BrowsersCatalog_Expecter struct {
	mock *mock.Mock
}

func (_m *BrowsersCatalog) EXPECT() *BrowsersCatalog_Expecter {
	return &BrowsersCatalog_Expecter{mock: &_m.Mock}
}

// GetBrowsers provides a mock function with given fields: protocol, flavor
func (_m *BrowsersCatalog) GetBrowsers(protocol models.BrowserProtocol, flavor string) []dto.Browser {
	ret := _m.Called(protocol, flavor)

	if len(ret) == 0 {
		panic("no return value specified for GetBrowsers")
	}

	var r0 []dto.Browser
	if rf, ok := ret.Get(0).(func(models.BrowserProtocol, string) []dto.Browser); ok {
		r0 = rf(protocol, flavor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Browser)
		}
	}

	return r0
}

// BrowsersCatalog_GetBrowsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBrowsers'
type BrowsersCatalog_GetBrowsers_Call struct {
	*mock.Call
}

// GetBrowsers is a helper method to define mock.On call
//   - protocol models.BrowserProtocol
//   - flavor string
func (_e *BrowsersCatalog_Expecter) GetBrowsers(protocol interface{}, flavor interface{}) *BrowsersCatalog_GetBrowsers_Call {
	return &BrowsersCatalog_GetBrowsers_Call{Call: _e.mock.On("GetBrowsers", protocol, flavor)}
}

func (_c *BrowsersCatalog_GetBrowsers_Call) Run(run func(protocol models.BrowserProtocol, flavor string)) *BrowsersCatalog_GetBrowsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.BrowserProtocol), args[1].(string))
	})
	return _c
}

func (_c *BrowsersCatalog_GetBrowsers_Call) Return(result []dto.Browser) *BrowsersCatalog_GetBrowsers_Call {
	_c.Call.Return(result)
	return _c
}

func (_c *BrowsersCatalog_GetBrowsers_Call) RunAndReturn(run func(models.BrowserProtocol, string) []dto.Browser) *BrowsersCatalog_GetBrowsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetImages provides a mock function with no fields
func (_m *BrowsersCatalog) GetImages() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetImages")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// BrowsersCatalog_GetImages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetImages'
type BrowsersCatalog_GetImages_Call struct {
	*mock.Call
}

// GetImages is a helper method to define mock.On call
func (_e *BrowsersCatalog_Expecter) GetImages() *BrowsersCatalog_GetImages_Call {
	return &BrowsersCatalog_GetImages_Call{Call: _e.mock.On("GetImages")}
}

func (_c *BrowsersCatalog_GetImages_Call) Run(run func()) *BrowsersCatalog_GetImages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BrowsersCatalog_GetImages_Call) Return(result []string) *BrowsersCatalog_GetImages_Call {
	_c.Call.Return(result)
	return _c
}

func (_c *BrowsersCatalog_GetImages_Call) RunAndReturn(run func() []string) *BrowsersCatalog_GetImages_Call {
	_c.Call.Return(run)
	return _c
}

// LookupBrowserImage provides a mock function with given fields: protocol, name, flavor
func (_m *BrowsersCatalog) LookupBrowserImage(protocol models.BrowserProtocol, name string, flavor string) (models.BrowserImageConfig, bool) {
	ret := _m.Called(protocol, name, flavor)

	if len(ret) == 0 {
		panic("no return value specified for LookupBrowserImage")
	}

	var r0 models.BrowserImageConfig
	var r1 bool
	if rf, ok := ret.Get(0).(func(models.BrowserProtocol, string, string) (models.BrowserImageConfig, bool)); ok {
		return rf(protocol, name, flavor)
	}
	if rf, ok := ret.Get(0).(func(models.BrowserProtocol, string, string) models.BrowserImageConfig); ok {
		r0 = rf(protocol, name, flavor)
	} else {
		r0 = ret.Get(0).(models.BrowserImageConfig)
	}

	if rf, ok := ret.Get(1).(func(models.BrowserProtocol, string, string) bool); ok {
		r1 = rf(protocol, name, flavor)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// BrowsersCatalog_LookupBrowserImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LookupBrowserImage'
type BrowsersCatalog_LookupBrowserImage_Call struct {
	*mock.Call
}

// LookupBrowserImage is a helper method to define mock.On call
//   - protocol models.BrowserProtocol
//   - name string
//   - flavor string
func (_e *BrowsersCatalog_Expecter) LookupBrowserImage(protocol interface{}, name interface{}, flavor interface{}) *BrowsersCatalog_LookupBrowserImage_Call {
	return &BrowsersCatalog_LookupBrowserImage_Call{Call: _e.mock.On("LookupBrowserImage", protocol, name, flavor)}
}

func (_c *BrowsersCatalog_LookupBrowserImage_Call) Run(run func(protocol models.BrowserProtocol, name string, flavor string)) *BrowsersCatalog_LookupBrowserImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.BrowserProtocol), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *BrowsersCatalog_LookupBrowserImage_Call) Return(_a0 models.BrowserImageConfig, _a1 bool) *BrowsersCatalog_LookupBrowserImage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BrowsersCatalog_LookupBrowserImage_Call) RunAndReturn(run func(models.BrowserProtocol, string, string) (models.BrowserImageConfig, bool)) *BrowsersCatalog_LookupBrowserImage_Call {
	_c.Call.Return(run)
	return _c
}

// NewBrowsersCatalog creates a new instance of BrowsersCatalog. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBrowsersCatalog(t interface {
	mock.TestingT
	Cleanup(func())
}) *BrowsersCatalog {
	mock := &BrowsersCatalog{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
