// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	pool "github.com/selebrow/selebrow/internal/browser/pool"
	mock "github.com/stretchr/testify/mock"
)

// BrowserPoolFactory is an autogenerated mock type for the BrowserPoolFactory type
type BrowserPoolFactory struct {
	mock.Mock
}

type BrowserPoolFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *BrowserPoolFactory) EXPECT() *BrowserPoolFactory_Expecter {
	return &BrowserPoolFactory_Expecter{mock: &_m.Mock}
}

// GetPool provides a mock function with given fields: name
func (_m *BrowserPoolFactory) GetPool(name string) pool.BrowserPool {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetPool")
	}

	var r0 pool.BrowserPool
	if rf, ok := ret.Get(0).(func(string) pool.BrowserPool); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pool.BrowserPool)
		}
	}

	return r0
}

// BrowserPoolFactory_GetPool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPool'
type BrowserPoolFactory_GetPool_Call struct {
	*mock.Call
}

// GetPool is a helper method to define mock.On call
//   - name string
func (_e *BrowserPoolFactory_Expecter) GetPool(name interface{}) *BrowserPoolFactory_GetPool_Call {
	return &BrowserPoolFactory_GetPool_Call{Call: _e.mock.On("GetPool", name)}
}

func (_c *BrowserPoolFactory_GetPool_Call) Run(run func(name string)) *BrowserPoolFactory_GetPool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *BrowserPoolFactory_GetPool_Call) Return(_a0 pool.BrowserPool) *BrowserPoolFactory_GetPool_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BrowserPoolFactory_GetPool_Call) RunAndReturn(run func(string) pool.BrowserPool) *BrowserPoolFactory_GetPool_Call {
	_c.Call.Return(run)
	return _c
}

// NewBrowserPoolFactory creates a new instance of BrowserPoolFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBrowserPoolFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *BrowserPoolFactory {
	mock := &BrowserPoolFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
