// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// QuotaQueue is an autogenerated mock type for the QuotaQueue type
type QuotaQueue struct {
	mock.Mock
}

type QuotaQueue_Expecter struct {
	mock *mock.Mock
}

func (_m *QuotaQueue) EXPECT() *QuotaQueue_Expecter {
	return &QuotaQueue_Expecter{mock: &_m.Mock}
}

// QueueLimit provides a mock function with no fields
func (_m *QuotaQueue) QueueLimit() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for QueueLimit")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// QuotaQueue_QueueLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueueLimit'
type QuotaQueue_QueueLimit_Call struct {
	*mock.Call
}

// QueueLimit is a helper method to define mock.On call
func (_e *QuotaQueue_Expecter) QueueLimit() *QuotaQueue_QueueLimit_Call {
	return &QuotaQueue_QueueLimit_Call{Call: _e.mock.On("QueueLimit")}
}

func (_c *QuotaQueue_QueueLimit_Call) Run(run func()) *QuotaQueue_QueueLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *QuotaQueue_QueueLimit_Call) Return(_a0 int) *QuotaQueue_QueueLimit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QuotaQueue_QueueLimit_Call) RunAndReturn(run func() int) *QuotaQueue_QueueLimit_Call {
	_c.Call.Return(run)
	return _c
}

// QueueSize provides a mock function with no fields
func (_m *QuotaQueue) QueueSize() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for QueueSize")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// QuotaQueue_QueueSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueueSize'
type QuotaQueue_QueueSize_Call struct {
	*mock.Call
}

// QueueSize is a helper method to define mock.On call
func (_e *QuotaQueue_Expecter) QueueSize() *QuotaQueue_QueueSize_Call {
	return &QuotaQueue_QueueSize_Call{Call: _e.mock.On("QueueSize")}
}

func (_c *QuotaQueue_QueueSize_Call) Run(run func()) *QuotaQueue_QueueSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *QuotaQueue_QueueSize_Call) Return(_a0 int) *QuotaQueue_QueueSize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QuotaQueue_QueueSize_Call) RunAndReturn(run func() int) *QuotaQueue_QueueSize_Call {
	_c.Call.Return(run)
	return _c
}

// NewQuotaQueue creates a new instance of QuotaQueue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQuotaQueue(t interface {
	mock.TestingT
	Cleanup(func())
}) *QuotaQueue {
	mock := &QuotaQueue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
