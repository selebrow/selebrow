// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/selebrow/selebrow/pkg/models"
	mock "github.com/stretchr/testify/mock"

	url "net/url"
)

// Browser is an autogenerated mock type for the Browser type
type Browser struct {
	mock.Mock
}

type Browser_Expecter struct {
	mock *mock.Mock
}

func (_m *Browser) EXPECT() *Browser_Expecter {
	return &Browser_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields: ctx, trash
func (_m *Browser) Close(ctx context.Context, trash bool) {
	_m.Called(ctx, trash)
}

// Browser_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Browser_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx context.Context
//   - trash bool
func (_e *Browser_Expecter) Close(ctx interface{}, trash interface{}) *Browser_Close_Call {
	return &Browser_Close_Call{Call: _e.mock.On("Close", ctx, trash)}
}

func (_c *Browser_Close_Call) Run(run func(ctx context.Context, trash bool)) *Browser_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bool))
	})
	return _c
}

func (_c *Browser_Close_Call) Return() *Browser_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *Browser_Close_Call) RunAndReturn(run func(context.Context, bool)) *Browser_Close_Call {
	_c.Run(run)
	return _c
}

// GetHost provides a mock function with no fields
func (_m *Browser) GetHost() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHost")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Browser_GetHost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHost'
type Browser_GetHost_Call struct {
	*mock.Call
}

// GetHost is a helper method to define mock.On call
func (_e *Browser_Expecter) GetHost() *Browser_GetHost_Call {
	return &Browser_GetHost_Call{Call: _e.mock.On("GetHost")}
}

func (_c *Browser_GetHost_Call) Run(run func()) *Browser_GetHost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Browser_GetHost_Call) Return(_a0 string) *Browser_GetHost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Browser_GetHost_Call) RunAndReturn(run func() string) *Browser_GetHost_Call {
	_c.Call.Return(run)
	return _c
}

// GetHostPort provides a mock function with given fields: name
func (_m *Browser) GetHostPort(name models.ContainerPort) string {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetHostPort")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(models.ContainerPort) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Browser_GetHostPort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHostPort'
type Browser_GetHostPort_Call struct {
	*mock.Call
}

// GetHostPort is a helper method to define mock.On call
//   - name models.ContainerPort
func (_e *Browser_Expecter) GetHostPort(name interface{}) *Browser_GetHostPort_Call {
	return &Browser_GetHostPort_Call{Call: _e.mock.On("GetHostPort", name)}
}

func (_c *Browser_GetHostPort_Call) Run(run func(name models.ContainerPort)) *Browser_GetHostPort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.ContainerPort))
	})
	return _c
}

func (_c *Browser_GetHostPort_Call) Return(_a0 string) *Browser_GetHostPort_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Browser_GetHostPort_Call) RunAndReturn(run func(models.ContainerPort) string) *Browser_GetHostPort_Call {
	_c.Call.Return(run)
	return _c
}

// GetURL provides a mock function with no fields
func (_m *Browser) GetURL() *url.URL {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetURL")
	}

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func() *url.URL); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	return r0
}

// Browser_GetURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetURL'
type Browser_GetURL_Call struct {
	*mock.Call
}

// GetURL is a helper method to define mock.On call
func (_e *Browser_Expecter) GetURL() *Browser_GetURL_Call {
	return &Browser_GetURL_Call{Call: _e.mock.On("GetURL")}
}

func (_c *Browser_GetURL_Call) Run(run func()) *Browser_GetURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Browser_GetURL_Call) Return(_a0 *url.URL) *Browser_GetURL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Browser_GetURL_Call) RunAndReturn(run func() *url.URL) *Browser_GetURL_Call {
	_c.Call.Return(run)
	return _c
}

// NewBrowser creates a new instance of Browser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBrowser(t interface {
	mock.TestingT
	Cleanup(func())
}) *Browser {
	mock := &Browser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
