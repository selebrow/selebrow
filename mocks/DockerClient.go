// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	context "context"

	container "github.com/docker/docker/api/types/container"

	image "github.com/docker/docker/api/types/image"

	mock "github.com/stretchr/testify/mock"

	network "github.com/docker/docker/api/types/network"
)

// DockerClient is an autogenerated mock type for the DockerClient type
type DockerClient struct {
	mock.Mock
}

type DockerClient_Expecter struct {
	mock *mock.Mock
}

func (_m *DockerClient) EXPECT() *DockerClient_Expecter {
	return &DockerClient_Expecter{mock: &_m.Mock}
}

// AvailableResources provides a mock function with given fields: ctx
func (_m *DockerClient) AvailableResources(ctx context.Context) (int, int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for AvailableResources")
	}

	var r0 int
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) (int, int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context) int64); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DockerClient_AvailableResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AvailableResources'
type DockerClient_AvailableResources_Call struct {
	*mock.Call
}

// AvailableResources is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DockerClient_Expecter) AvailableResources(ctx interface{}) *DockerClient_AvailableResources_Call {
	return &DockerClient_AvailableResources_Call{Call: _e.mock.On("AvailableResources", ctx)}
}

func (_c *DockerClient_AvailableResources_Call) Run(run func(ctx context.Context)) *DockerClient_AvailableResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *DockerClient_AvailableResources_Call) Return(cpus int, memory int64, err error) *DockerClient_AvailableResources_Call {
	_c.Call.Return(cpus, memory, err)
	return _c
}

func (_c *DockerClient_AvailableResources_Call) RunAndReturn(run func(context.Context) (int, int64, error)) *DockerClient_AvailableResources_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerCreate provides a mock function with given fields: ctx, config, hostConfig, networkingConfig, containerName
func (_m *DockerClient) ContainerCreate(ctx context.Context, config *container.Config, hostConfig *container.HostConfig, networkingConfig *network.NetworkingConfig, containerName string) (container.CreateResponse, error) {
	ret := _m.Called(ctx, config, hostConfig, networkingConfig, containerName)

	if len(ret) == 0 {
		panic("no return value specified for ContainerCreate")
	}

	var r0 container.CreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *container.Config, *container.HostConfig, *network.NetworkingConfig, string) (container.CreateResponse, error)); ok {
		return rf(ctx, config, hostConfig, networkingConfig, containerName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *container.Config, *container.HostConfig, *network.NetworkingConfig, string) container.CreateResponse); ok {
		r0 = rf(ctx, config, hostConfig, networkingConfig, containerName)
	} else {
		r0 = ret.Get(0).(container.CreateResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *container.Config, *container.HostConfig, *network.NetworkingConfig, string) error); ok {
		r1 = rf(ctx, config, hostConfig, networkingConfig, containerName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DockerClient_ContainerCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerCreate'
type DockerClient_ContainerCreate_Call struct {
	*mock.Call
}

// ContainerCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - config *container.Config
//   - hostConfig *container.HostConfig
//   - networkingConfig *network.NetworkingConfig
//   - containerName string
func (_e *DockerClient_Expecter) ContainerCreate(ctx interface{}, config interface{}, hostConfig interface{}, networkingConfig interface{}, containerName interface{}) *DockerClient_ContainerCreate_Call {
	return &DockerClient_ContainerCreate_Call{Call: _e.mock.On("ContainerCreate", ctx, config, hostConfig, networkingConfig, containerName)}
}

func (_c *DockerClient_ContainerCreate_Call) Run(run func(ctx context.Context, config *container.Config, hostConfig *container.HostConfig, networkingConfig *network.NetworkingConfig, containerName string)) *DockerClient_ContainerCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*container.Config), args[2].(*container.HostConfig), args[3].(*network.NetworkingConfig), args[4].(string))
	})
	return _c
}

func (_c *DockerClient_ContainerCreate_Call) Return(_a0 container.CreateResponse, _a1 error) *DockerClient_ContainerCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DockerClient_ContainerCreate_Call) RunAndReturn(run func(context.Context, *container.Config, *container.HostConfig, *network.NetworkingConfig, string) (container.CreateResponse, error)) *DockerClient_ContainerCreate_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerInspect provides a mock function with given fields: ctx, containerID
func (_m *DockerClient) ContainerInspect(ctx context.Context, containerID string) (container.InspectResponse, error) {
	ret := _m.Called(ctx, containerID)

	if len(ret) == 0 {
		panic("no return value specified for ContainerInspect")
	}

	var r0 container.InspectResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (container.InspectResponse, error)); ok {
		return rf(ctx, containerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) container.InspectResponse); ok {
		r0 = rf(ctx, containerID)
	} else {
		r0 = ret.Get(0).(container.InspectResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, containerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DockerClient_ContainerInspect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerInspect'
type DockerClient_ContainerInspect_Call struct {
	*mock.Call
}

// ContainerInspect is a helper method to define mock.On call
//   - ctx context.Context
//   - containerID string
func (_e *DockerClient_Expecter) ContainerInspect(ctx interface{}, containerID interface{}) *DockerClient_ContainerInspect_Call {
	return &DockerClient_ContainerInspect_Call{Call: _e.mock.On("ContainerInspect", ctx, containerID)}
}

func (_c *DockerClient_ContainerInspect_Call) Run(run func(ctx context.Context, containerID string)) *DockerClient_ContainerInspect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DockerClient_ContainerInspect_Call) Return(_a0 container.InspectResponse, _a1 error) *DockerClient_ContainerInspect_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DockerClient_ContainerInspect_Call) RunAndReturn(run func(context.Context, string) (container.InspectResponse, error)) *DockerClient_ContainerInspect_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerList provides a mock function with given fields: ctx
func (_m *DockerClient) ContainerList(ctx context.Context) ([]container.Summary, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ContainerList")
	}

	var r0 []container.Summary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]container.Summary, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []container.Summary); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]container.Summary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DockerClient_ContainerList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerList'
type DockerClient_ContainerList_Call struct {
	*mock.Call
}

// ContainerList is a helper method to define mock.On call
//   - ctx context.Context
func (_e *DockerClient_Expecter) ContainerList(ctx interface{}) *DockerClient_ContainerList_Call {
	return &DockerClient_ContainerList_Call{Call: _e.mock.On("ContainerList", ctx)}
}

func (_c *DockerClient_ContainerList_Call) Run(run func(ctx context.Context)) *DockerClient_ContainerList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *DockerClient_ContainerList_Call) Return(_a0 []container.Summary, _a1 error) *DockerClient_ContainerList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DockerClient_ContainerList_Call) RunAndReturn(run func(context.Context) ([]container.Summary, error)) *DockerClient_ContainerList_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerRemove provides a mock function with given fields: ctx, containerID, force
func (_m *DockerClient) ContainerRemove(ctx context.Context, containerID string, force bool) error {
	ret := _m.Called(ctx, containerID, force)

	if len(ret) == 0 {
		panic("no return value specified for ContainerRemove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = rf(ctx, containerID, force)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DockerClient_ContainerRemove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerRemove'
type DockerClient_ContainerRemove_Call struct {
	*mock.Call
}

// ContainerRemove is a helper method to define mock.On call
//   - ctx context.Context
//   - containerID string
//   - force bool
func (_e *DockerClient_Expecter) ContainerRemove(ctx interface{}, containerID interface{}, force interface{}) *DockerClient_ContainerRemove_Call {
	return &DockerClient_ContainerRemove_Call{Call: _e.mock.On("ContainerRemove", ctx, containerID, force)}
}

func (_c *DockerClient_ContainerRemove_Call) Run(run func(ctx context.Context, containerID string, force bool)) *DockerClient_ContainerRemove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bool))
	})
	return _c
}

func (_c *DockerClient_ContainerRemove_Call) Return(_a0 error) *DockerClient_ContainerRemove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DockerClient_ContainerRemove_Call) RunAndReturn(run func(context.Context, string, bool) error) *DockerClient_ContainerRemove_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerStart provides a mock function with given fields: ctx, containerID
func (_m *DockerClient) ContainerStart(ctx context.Context, containerID string) error {
	ret := _m.Called(ctx, containerID)

	if len(ret) == 0 {
		panic("no return value specified for ContainerStart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, containerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DockerClient_ContainerStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerStart'
type DockerClient_ContainerStart_Call struct {
	*mock.Call
}

// ContainerStart is a helper method to define mock.On call
//   - ctx context.Context
//   - containerID string
func (_e *DockerClient_Expecter) ContainerStart(ctx interface{}, containerID interface{}) *DockerClient_ContainerStart_Call {
	return &DockerClient_ContainerStart_Call{Call: _e.mock.On("ContainerStart", ctx, containerID)}
}

func (_c *DockerClient_ContainerStart_Call) Run(run func(ctx context.Context, containerID string)) *DockerClient_ContainerStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DockerClient_ContainerStart_Call) Return(_a0 error) *DockerClient_ContainerStart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DockerClient_ContainerStart_Call) RunAndReturn(run func(context.Context, string) error) *DockerClient_ContainerStart_Call {
	_c.Call.Return(run)
	return _c
}

// GetHost provides a mock function with no fields
func (_m *DockerClient) GetHost() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHost")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DockerClient_GetHost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHost'
type DockerClient_GetHost_Call struct {
	*mock.Call
}

// GetHost is a helper method to define mock.On call
func (_e *DockerClient_Expecter) GetHost() *DockerClient_GetHost_Call {
	return &DockerClient_GetHost_Call{Call: _e.mock.On("GetHost")}
}

func (_c *DockerClient_GetHost_Call) Run(run func()) *DockerClient_GetHost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DockerClient_GetHost_Call) Return(_a0 string) *DockerClient_GetHost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DockerClient_GetHost_Call) RunAndReturn(run func() string) *DockerClient_GetHost_Call {
	_c.Call.Return(run)
	return _c
}

// ImageInspect provides a mock function with given fields: ctx, _a1
func (_m *DockerClient) ImageInspect(ctx context.Context, _a1 string) (image.InspectResponse, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ImageInspect")
	}

	var r0 image.InspectResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (image.InspectResponse, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) image.InspectResponse); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(image.InspectResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DockerClient_ImageInspect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImageInspect'
type DockerClient_ImageInspect_Call struct {
	*mock.Call
}

// ImageInspect is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
func (_e *DockerClient_Expecter) ImageInspect(ctx interface{}, _a1 interface{}) *DockerClient_ImageInspect_Call {
	return &DockerClient_ImageInspect_Call{Call: _e.mock.On("ImageInspect", ctx, _a1)}
}

func (_c *DockerClient_ImageInspect_Call) Run(run func(ctx context.Context, _a1 string)) *DockerClient_ImageInspect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DockerClient_ImageInspect_Call) Return(_a0 image.InspectResponse, _a1 error) *DockerClient_ImageInspect_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DockerClient_ImageInspect_Call) RunAndReturn(run func(context.Context, string) (image.InspectResponse, error)) *DockerClient_ImageInspect_Call {
	_c.Call.Return(run)
	return _c
}

// ImagePull provides a mock function with given fields: ctx, _a1
func (_m *DockerClient) ImagePull(ctx context.Context, _a1 string) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ImagePull")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DockerClient_ImagePull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImagePull'
type DockerClient_ImagePull_Call struct {
	*mock.Call
}

// ImagePull is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
func (_e *DockerClient_Expecter) ImagePull(ctx interface{}, _a1 interface{}) *DockerClient_ImagePull_Call {
	return &DockerClient_ImagePull_Call{Call: _e.mock.On("ImagePull", ctx, _a1)}
}

func (_c *DockerClient_ImagePull_Call) Run(run func(ctx context.Context, _a1 string)) *DockerClient_ImagePull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DockerClient_ImagePull_Call) Return(_a0 error) *DockerClient_ImagePull_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DockerClient_ImagePull_Call) RunAndReturn(run func(context.Context, string) error) *DockerClient_ImagePull_Call {
	_c.Call.Return(run)
	return _c
}

// NewDockerClient creates a new instance of DockerClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDockerClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *DockerClient {
	mock := &DockerClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
