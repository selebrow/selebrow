// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// Capabilities is an autogenerated mock type for the Capabilities type
type Capabilities struct {
	mock.Mock
}

type Capabilities_Expecter struct {
	mock *mock.Mock
}

func (_m *Capabilities) EXPECT() *Capabilities_Expecter {
	return &Capabilities_Expecter{mock: &_m.Mock}
}

// GetEnvs provides a mock function with no fields
func (_m *Capabilities) GetEnvs() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEnvs")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Capabilities_GetEnvs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEnvs'
type Capabilities_GetEnvs_Call struct {
	*mock.Call
}

// GetEnvs is a helper method to define mock.On call
func (_e *Capabilities_Expecter) GetEnvs() *Capabilities_GetEnvs_Call {
	return &Capabilities_GetEnvs_Call{Call: _e.mock.On("GetEnvs")}
}

func (_c *Capabilities_GetEnvs_Call) Run(run func()) *Capabilities_GetEnvs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Capabilities_GetEnvs_Call) Return(_a0 []string) *Capabilities_GetEnvs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Capabilities_GetEnvs_Call) RunAndReturn(run func() []string) *Capabilities_GetEnvs_Call {
	_c.Call.Return(run)
	return _c
}

// GetFlavor provides a mock function with no fields
func (_m *Capabilities) GetFlavor() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFlavor")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Capabilities_GetFlavor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFlavor'
type Capabilities_GetFlavor_Call struct {
	*mock.Call
}

// GetFlavor is a helper method to define mock.On call
func (_e *Capabilities_Expecter) GetFlavor() *Capabilities_GetFlavor_Call {
	return &Capabilities_GetFlavor_Call{Call: _e.mock.On("GetFlavor")}
}

func (_c *Capabilities_GetFlavor_Call) Run(run func()) *Capabilities_GetFlavor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Capabilities_GetFlavor_Call) Return(_a0 string) *Capabilities_GetFlavor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Capabilities_GetFlavor_Call) RunAndReturn(run func() string) *Capabilities_GetFlavor_Call {
	_c.Call.Return(run)
	return _c
}

// GetHosts provides a mock function with no fields
func (_m *Capabilities) GetHosts() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHosts")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Capabilities_GetHosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHosts'
type Capabilities_GetHosts_Call struct {
	*mock.Call
}

// GetHosts is a helper method to define mock.On call
func (_e *Capabilities_Expecter) GetHosts() *Capabilities_GetHosts_Call {
	return &Capabilities_GetHosts_Call{Call: _e.mock.On("GetHosts")}
}

func (_c *Capabilities_GetHosts_Call) Run(run func()) *Capabilities_GetHosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Capabilities_GetHosts_Call) Return(_a0 []string) *Capabilities_GetHosts_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Capabilities_GetHosts_Call) RunAndReturn(run func() []string) *Capabilities_GetHosts_Call {
	_c.Call.Return(run)
	return _c
}

// GetLabels provides a mock function with no fields
func (_m *Capabilities) GetLabels() map[string]string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLabels")
	}

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// Capabilities_GetLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLabels'
type Capabilities_GetLabels_Call struct {
	*mock.Call
}

// GetLabels is a helper method to define mock.On call
func (_e *Capabilities_Expecter) GetLabels() *Capabilities_GetLabels_Call {
	return &Capabilities_GetLabels_Call{Call: _e.mock.On("GetLabels")}
}

func (_c *Capabilities_GetLabels_Call) Run(run func()) *Capabilities_GetLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Capabilities_GetLabels_Call) Return(_a0 map[string]string) *Capabilities_GetLabels_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Capabilities_GetLabels_Call) RunAndReturn(run func() map[string]string) *Capabilities_GetLabels_Call {
	_c.Call.Return(run)
	return _c
}

// GetLinks provides a mock function with no fields
func (_m *Capabilities) GetLinks() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLinks")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Capabilities_GetLinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLinks'
type Capabilities_GetLinks_Call struct {
	*mock.Call
}

// GetLinks is a helper method to define mock.On call
func (_e *Capabilities_Expecter) GetLinks() *Capabilities_GetLinks_Call {
	return &Capabilities_GetLinks_Call{Call: _e.mock.On("GetLinks")}
}

func (_c *Capabilities_GetLinks_Call) Run(run func()) *Capabilities_GetLinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Capabilities_GetLinks_Call) Return(_a0 []string) *Capabilities_GetLinks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Capabilities_GetLinks_Call) RunAndReturn(run func() []string) *Capabilities_GetLinks_Call {
	_c.Call.Return(run)
	return _c
}

// GetName provides a mock function with no fields
func (_m *Capabilities) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Capabilities_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type Capabilities_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *Capabilities_Expecter) GetName() *Capabilities_GetName_Call {
	return &Capabilities_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *Capabilities_GetName_Call) Run(run func()) *Capabilities_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Capabilities_GetName_Call) Return(_a0 string) *Capabilities_GetName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Capabilities_GetName_Call) RunAndReturn(run func() string) *Capabilities_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// GetNetworks provides a mock function with no fields
func (_m *Capabilities) GetNetworks() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNetworks")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Capabilities_GetNetworks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNetworks'
type Capabilities_GetNetworks_Call struct {
	*mock.Call
}

// GetNetworks is a helper method to define mock.On call
func (_e *Capabilities_Expecter) GetNetworks() *Capabilities_GetNetworks_Call {
	return &Capabilities_GetNetworks_Call{Call: _e.mock.On("GetNetworks")}
}

func (_c *Capabilities_GetNetworks_Call) Run(run func()) *Capabilities_GetNetworks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Capabilities_GetNetworks_Call) Return(_a0 []string) *Capabilities_GetNetworks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Capabilities_GetNetworks_Call) RunAndReturn(run func() []string) *Capabilities_GetNetworks_Call {
	_c.Call.Return(run)
	return _c
}

// GetPlatform provides a mock function with no fields
func (_m *Capabilities) GetPlatform() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPlatform")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Capabilities_GetPlatform_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPlatform'
type Capabilities_GetPlatform_Call struct {
	*mock.Call
}

// GetPlatform is a helper method to define mock.On call
func (_e *Capabilities_Expecter) GetPlatform() *Capabilities_GetPlatform_Call {
	return &Capabilities_GetPlatform_Call{Call: _e.mock.On("GetPlatform")}
}

func (_c *Capabilities_GetPlatform_Call) Run(run func()) *Capabilities_GetPlatform_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Capabilities_GetPlatform_Call) Return(_a0 string) *Capabilities_GetPlatform_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Capabilities_GetPlatform_Call) RunAndReturn(run func() string) *Capabilities_GetPlatform_Call {
	_c.Call.Return(run)
	return _c
}

// GetRawCapabilities provides a mock function with no fields
func (_m *Capabilities) GetRawCapabilities() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRawCapabilities")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// Capabilities_GetRawCapabilities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRawCapabilities'
type Capabilities_GetRawCapabilities_Call struct {
	*mock.Call
}

// GetRawCapabilities is a helper method to define mock.On call
func (_e *Capabilities_Expecter) GetRawCapabilities() *Capabilities_GetRawCapabilities_Call {
	return &Capabilities_GetRawCapabilities_Call{Call: _e.mock.On("GetRawCapabilities")}
}

func (_c *Capabilities_GetRawCapabilities_Call) Run(run func()) *Capabilities_GetRawCapabilities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Capabilities_GetRawCapabilities_Call) Return(_a0 []byte) *Capabilities_GetRawCapabilities_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Capabilities_GetRawCapabilities_Call) RunAndReturn(run func() []byte) *Capabilities_GetRawCapabilities_Call {
	_c.Call.Return(run)
	return _c
}

// GetResolution provides a mock function with no fields
func (_m *Capabilities) GetResolution() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetResolution")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Capabilities_GetResolution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResolution'
type Capabilities_GetResolution_Call struct {
	*mock.Call
}

// GetResolution is a helper method to define mock.On call
func (_e *Capabilities_Expecter) GetResolution() *Capabilities_GetResolution_Call {
	return &Capabilities_GetResolution_Call{Call: _e.mock.On("GetResolution")}
}

func (_c *Capabilities_GetResolution_Call) Run(run func()) *Capabilities_GetResolution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Capabilities_GetResolution_Call) Return(_a0 string) *Capabilities_GetResolution_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Capabilities_GetResolution_Call) RunAndReturn(run func() string) *Capabilities_GetResolution_Call {
	_c.Call.Return(run)
	return _c
}

// GetTestName provides a mock function with no fields
func (_m *Capabilities) GetTestName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTestName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Capabilities_GetTestName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTestName'
type Capabilities_GetTestName_Call struct {
	*mock.Call
}

// GetTestName is a helper method to define mock.On call
func (_e *Capabilities_Expecter) GetTestName() *Capabilities_GetTestName_Call {
	return &Capabilities_GetTestName_Call{Call: _e.mock.On("GetTestName")}
}

func (_c *Capabilities_GetTestName_Call) Run(run func()) *Capabilities_GetTestName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Capabilities_GetTestName_Call) Return(_a0 string) *Capabilities_GetTestName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Capabilities_GetTestName_Call) RunAndReturn(run func() string) *Capabilities_GetTestName_Call {
	_c.Call.Return(run)
	return _c
}

// GetTimeout provides a mock function with no fields
func (_m *Capabilities) GetTimeout() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTimeout")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// Capabilities_GetTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTimeout'
type Capabilities_GetTimeout_Call struct {
	*mock.Call
}

// GetTimeout is a helper method to define mock.On call
func (_e *Capabilities_Expecter) GetTimeout() *Capabilities_GetTimeout_Call {
	return &Capabilities_GetTimeout_Call{Call: _e.mock.On("GetTimeout")}
}

func (_c *Capabilities_GetTimeout_Call) Run(run func()) *Capabilities_GetTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Capabilities_GetTimeout_Call) Return(_a0 time.Duration) *Capabilities_GetTimeout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Capabilities_GetTimeout_Call) RunAndReturn(run func() time.Duration) *Capabilities_GetTimeout_Call {
	_c.Call.Return(run)
	return _c
}

// GetVersion provides a mock function with no fields
func (_m *Capabilities) GetVersion() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetVersion")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Capabilities_GetVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVersion'
type Capabilities_GetVersion_Call struct {
	*mock.Call
}

// GetVersion is a helper method to define mock.On call
func (_e *Capabilities_Expecter) GetVersion() *Capabilities_GetVersion_Call {
	return &Capabilities_GetVersion_Call{Call: _e.mock.On("GetVersion")}
}

func (_c *Capabilities_GetVersion_Call) Run(run func()) *Capabilities_GetVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Capabilities_GetVersion_Call) Return(_a0 string) *Capabilities_GetVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Capabilities_GetVersion_Call) RunAndReturn(run func() string) *Capabilities_GetVersion_Call {
	_c.Call.Return(run)
	return _c
}

// IsVNCEnabled provides a mock function with no fields
func (_m *Capabilities) IsVNCEnabled() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsVNCEnabled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Capabilities_IsVNCEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsVNCEnabled'
type Capabilities_IsVNCEnabled_Call struct {
	*mock.Call
}

// IsVNCEnabled is a helper method to define mock.On call
func (_e *Capabilities_Expecter) IsVNCEnabled() *Capabilities_IsVNCEnabled_Call {
	return &Capabilities_IsVNCEnabled_Call{Call: _e.mock.On("IsVNCEnabled")}
}

func (_c *Capabilities_IsVNCEnabled_Call) Run(run func()) *Capabilities_IsVNCEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Capabilities_IsVNCEnabled_Call) Return(_a0 bool) *Capabilities_IsVNCEnabled_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Capabilities_IsVNCEnabled_Call) RunAndReturn(run func() bool) *Capabilities_IsVNCEnabled_Call {
	_c.Call.Return(run)
	return _c
}

// NewCapabilities creates a new instance of Capabilities. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCapabilities(t interface {
	mock.TestingT
	Cleanup(func())
}) *Capabilities {
	mock := &Capabilities{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
