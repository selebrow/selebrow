// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	config "github.com/selebrow/selebrow/pkg/config"
	mock "github.com/stretchr/testify/mock"
)

// DockerConfig is an autogenerated mock type for the DockerConfig type
type DockerConfig struct {
	mock.Mock
}

type DockerConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *DockerConfig) EXPECT() *DockerConfig_Expecter {
	return &DockerConfig_Expecter{mock: &_m.Mock}
}

// DockerNetwork provides a mock function with no fields
func (_m *DockerConfig) DockerNetwork() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DockerNetwork")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DockerConfig_DockerNetwork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DockerNetwork'
type DockerConfig_DockerNetwork_Call struct {
	*mock.Call
}

// DockerNetwork is a helper method to define mock.On call
func (_e *DockerConfig_Expecter) DockerNetwork() *DockerConfig_DockerNetwork_Call {
	return &DockerConfig_DockerNetwork_Call{Call: _e.mock.On("DockerNetwork")}
}

func (_c *DockerConfig_DockerNetwork_Call) Run(run func()) *DockerConfig_DockerNetwork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DockerConfig_DockerNetwork_Call) Return(_a0 string) *DockerConfig_DockerNetwork_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DockerConfig_DockerNetwork_Call) RunAndReturn(run func() string) *DockerConfig_DockerNetwork_Call {
	_c.Call.Return(run)
	return _c
}

// DockerPlatform provides a mock function with no fields
func (_m *DockerConfig) DockerPlatform() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DockerPlatform")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DockerConfig_DockerPlatform_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DockerPlatform'
type DockerConfig_DockerPlatform_Call struct {
	*mock.Call
}

// DockerPlatform is a helper method to define mock.On call
func (_e *DockerConfig_Expecter) DockerPlatform() *DockerConfig_DockerPlatform_Call {
	return &DockerConfig_DockerPlatform_Call{Call: _e.mock.On("DockerPlatform")}
}

func (_c *DockerConfig_DockerPlatform_Call) Run(run func()) *DockerConfig_DockerPlatform_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DockerConfig_DockerPlatform_Call) Return(_a0 string) *DockerConfig_DockerPlatform_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DockerConfig_DockerPlatform_Call) RunAndReturn(run func() string) *DockerConfig_DockerPlatform_Call {
	_c.Call.Return(run)
	return _c
}

// DockerPortMapping provides a mock function with no fields
func (_m *DockerConfig) DockerPortMapping() config.PortMappingMode {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DockerPortMapping")
	}

	var r0 config.PortMappingMode
	if rf, ok := ret.Get(0).(func() config.PortMappingMode); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(config.PortMappingMode)
	}

	return r0
}

// DockerConfig_DockerPortMapping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DockerPortMapping'
type DockerConfig_DockerPortMapping_Call struct {
	*mock.Call
}

// DockerPortMapping is a helper method to define mock.On call
func (_e *DockerConfig_Expecter) DockerPortMapping() *DockerConfig_DockerPortMapping_Call {
	return &DockerConfig_DockerPortMapping_Call{Call: _e.mock.On("DockerPortMapping")}
}

func (_c *DockerConfig_DockerPortMapping_Call) Run(run func()) *DockerConfig_DockerPortMapping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DockerConfig_DockerPortMapping_Call) Return(_a0 config.PortMappingMode) *DockerConfig_DockerPortMapping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DockerConfig_DockerPortMapping_Call) RunAndReturn(run func() config.PortMappingMode) *DockerConfig_DockerPortMapping_Call {
	_c.Call.Return(run)
	return _c
}

// DockerPrivileged provides a mock function with no fields
func (_m *DockerConfig) DockerPrivileged() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DockerPrivileged")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DockerConfig_DockerPrivileged_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DockerPrivileged'
type DockerConfig_DockerPrivileged_Call struct {
	*mock.Call
}

// DockerPrivileged is a helper method to define mock.On call
func (_e *DockerConfig_Expecter) DockerPrivileged() *DockerConfig_DockerPrivileged_Call {
	return &DockerConfig_DockerPrivileged_Call{Call: _e.mock.On("DockerPrivileged")}
}

func (_c *DockerConfig_DockerPrivileged_Call) Run(run func()) *DockerConfig_DockerPrivileged_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DockerConfig_DockerPrivileged_Call) Return(_a0 bool) *DockerConfig_DockerPrivileged_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DockerConfig_DockerPrivileged_Call) RunAndReturn(run func() bool) *DockerConfig_DockerPrivileged_Call {
	_c.Call.Return(run)
	return _c
}

// DockerPullImages provides a mock function with no fields
func (_m *DockerConfig) DockerPullImages() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DockerPullImages")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DockerConfig_DockerPullImages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DockerPullImages'
type DockerConfig_DockerPullImages_Call struct {
	*mock.Call
}

// DockerPullImages is a helper method to define mock.On call
func (_e *DockerConfig_Expecter) DockerPullImages() *DockerConfig_DockerPullImages_Call {
	return &DockerConfig_DockerPullImages_Call{Call: _e.mock.On("DockerPullImages")}
}

func (_c *DockerConfig_DockerPullImages_Call) Run(run func()) *DockerConfig_DockerPullImages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DockerConfig_DockerPullImages_Call) Return(_a0 bool) *DockerConfig_DockerPullImages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DockerConfig_DockerPullImages_Call) RunAndReturn(run func() bool) *DockerConfig_DockerPullImages_Call {
	_c.Call.Return(run)
	return _c
}

// NewDockerConfig creates a new instance of DockerConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDockerConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *DockerConfig {
	mock := &DockerConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
