// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// PoolConfig is an autogenerated mock type for the PoolConfig type
type PoolConfig struct {
	mock.Mock
}

type PoolConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *PoolConfig) EXPECT() *PoolConfig_Expecter {
	return &PoolConfig_Expecter{mock: &_m.Mock}
}

// IdleTimeout provides a mock function with no fields
func (_m *PoolConfig) IdleTimeout() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IdleTimeout")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// PoolConfig_IdleTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IdleTimeout'
type PoolConfig_IdleTimeout_Call struct {
	*mock.Call
}

// IdleTimeout is a helper method to define mock.On call
func (_e *PoolConfig_Expecter) IdleTimeout() *PoolConfig_IdleTimeout_Call {
	return &PoolConfig_IdleTimeout_Call{Call: _e.mock.On("IdleTimeout")}
}

func (_c *PoolConfig_IdleTimeout_Call) Run(run func()) *PoolConfig_IdleTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PoolConfig_IdleTimeout_Call) Return(_a0 time.Duration) *PoolConfig_IdleTimeout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PoolConfig_IdleTimeout_Call) RunAndReturn(run func() time.Duration) *PoolConfig_IdleTimeout_Call {
	_c.Call.Return(run)
	return _c
}

// MaxAge provides a mock function with no fields
func (_m *PoolConfig) MaxAge() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MaxAge")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// PoolConfig_MaxAge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MaxAge'
type PoolConfig_MaxAge_Call struct {
	*mock.Call
}

// MaxAge is a helper method to define mock.On call
func (_e *PoolConfig_Expecter) MaxAge() *PoolConfig_MaxAge_Call {
	return &PoolConfig_MaxAge_Call{Call: _e.mock.On("MaxAge")}
}

func (_c *PoolConfig_MaxAge_Call) Run(run func()) *PoolConfig_MaxAge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PoolConfig_MaxAge_Call) Return(_a0 time.Duration) *PoolConfig_MaxAge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PoolConfig_MaxAge_Call) RunAndReturn(run func() time.Duration) *PoolConfig_MaxAge_Call {
	_c.Call.Return(run)
	return _c
}

// MaxIdle provides a mock function with no fields
func (_m *PoolConfig) MaxIdle() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MaxIdle")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// PoolConfig_MaxIdle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MaxIdle'
type PoolConfig_MaxIdle_Call struct {
	*mock.Call
}

// MaxIdle is a helper method to define mock.On call
func (_e *PoolConfig_Expecter) MaxIdle() *PoolConfig_MaxIdle_Call {
	return &PoolConfig_MaxIdle_Call{Call: _e.mock.On("MaxIdle")}
}

func (_c *PoolConfig_MaxIdle_Call) Run(run func()) *PoolConfig_MaxIdle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PoolConfig_MaxIdle_Call) Return(_a0 int) *PoolConfig_MaxIdle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PoolConfig_MaxIdle_Call) RunAndReturn(run func() int) *PoolConfig_MaxIdle_Call {
	_c.Call.Return(run)
	return _c
}

// NewPoolConfig creates a new instance of PoolConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPoolConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *PoolConfig {
	mock := &PoolConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
