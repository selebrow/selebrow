// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	context "context"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/api/core/v1"

	watch "k8s.io/apimachinery/pkg/watch"
)

// KubernetesClient is an autogenerated mock type for the KubernetesClient type
type KubernetesClient struct {
	mock.Mock
}

type KubernetesClient_Expecter struct {
	mock *mock.Mock
}

func (_m *KubernetesClient) EXPECT() *KubernetesClient_Expecter {
	return &KubernetesClient_Expecter{mock: &_m.Mock}
}

// ClusterModeOut provides a mock function with no fields
func (_m *KubernetesClient) ClusterModeOut() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ClusterModeOut")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// KubernetesClient_ClusterModeOut_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterModeOut'
type KubernetesClient_ClusterModeOut_Call struct {
	*mock.Call
}

// ClusterModeOut is a helper method to define mock.On call
func (_e *KubernetesClient_Expecter) ClusterModeOut() *KubernetesClient_ClusterModeOut_Call {
	return &KubernetesClient_ClusterModeOut_Call{Call: _e.mock.On("ClusterModeOut")}
}

func (_c *KubernetesClient_ClusterModeOut_Call) Run(run func()) *KubernetesClient_ClusterModeOut_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KubernetesClient_ClusterModeOut_Call) Return(_a0 bool) *KubernetesClient_ClusterModeOut_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KubernetesClient_ClusterModeOut_Call) RunAndReturn(run func() bool) *KubernetesClient_ClusterModeOut_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePod provides a mock function with given fields: ctx, pod
func (_m *KubernetesClient) CreatePod(ctx context.Context, pod *v1.Pod) (*v1.Pod, error) {
	ret := _m.Called(ctx, pod)

	if len(ret) == 0 {
		panic("no return value specified for CreatePod")
	}

	var r0 *v1.Pod
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Pod) (*v1.Pod, error)); ok {
		return rf(ctx, pod)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Pod) *v1.Pod); ok {
		r0 = rf(ctx, pod)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Pod)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.Pod) error); ok {
		r1 = rf(ctx, pod)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KubernetesClient_CreatePod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePod'
type KubernetesClient_CreatePod_Call struct {
	*mock.Call
}

// CreatePod is a helper method to define mock.On call
//   - ctx context.Context
//   - pod *v1.Pod
func (_e *KubernetesClient_Expecter) CreatePod(ctx interface{}, pod interface{}) *KubernetesClient_CreatePod_Call {
	return &KubernetesClient_CreatePod_Call{Call: _e.mock.On("CreatePod", ctx, pod)}
}

func (_c *KubernetesClient_CreatePod_Call) Run(run func(ctx context.Context, pod *v1.Pod)) *KubernetesClient_CreatePod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.Pod))
	})
	return _c
}

func (_c *KubernetesClient_CreatePod_Call) Return(_a0 *v1.Pod, _a1 error) *KubernetesClient_CreatePod_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KubernetesClient_CreatePod_Call) RunAndReturn(run func(context.Context, *v1.Pod) (*v1.Pod, error)) *KubernetesClient_CreatePod_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePod provides a mock function with given fields: ctx, name
func (_m *KubernetesClient) DeletePod(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeletePod")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KubernetesClient_DeletePod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePod'
type KubernetesClient_DeletePod_Call struct {
	*mock.Call
}

// DeletePod is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *KubernetesClient_Expecter) DeletePod(ctx interface{}, name interface{}) *KubernetesClient_DeletePod_Call {
	return &KubernetesClient_DeletePod_Call{Call: _e.mock.On("DeletePod", ctx, name)}
}

func (_c *KubernetesClient_DeletePod_Call) Run(run func(ctx context.Context, name string)) *KubernetesClient_DeletePod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *KubernetesClient_DeletePod_Call) Return(_a0 error) *KubernetesClient_DeletePod_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KubernetesClient_DeletePod_Call) RunAndReturn(run func(context.Context, string) error) *KubernetesClient_DeletePod_Call {
	_c.Call.Return(run)
	return _c
}

// ListPods provides a mock function with given fields: ctx, selector
func (_m *KubernetesClient) ListPods(ctx context.Context, selector *metav1.LabelSelector) (*v1.PodList, error) {
	ret := _m.Called(ctx, selector)

	if len(ret) == 0 {
		panic("no return value specified for ListPods")
	}

	var r0 *v1.PodList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *metav1.LabelSelector) (*v1.PodList, error)); ok {
		return rf(ctx, selector)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *metav1.LabelSelector) *v1.PodList); ok {
		r0 = rf(ctx, selector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.PodList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *metav1.LabelSelector) error); ok {
		r1 = rf(ctx, selector)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KubernetesClient_ListPods_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPods'
type KubernetesClient_ListPods_Call struct {
	*mock.Call
}

// ListPods is a helper method to define mock.On call
//   - ctx context.Context
//   - selector *metav1.LabelSelector
func (_e *KubernetesClient_Expecter) ListPods(ctx interface{}, selector interface{}) *KubernetesClient_ListPods_Call {
	return &KubernetesClient_ListPods_Call{Call: _e.mock.On("ListPods", ctx, selector)}
}

func (_c *KubernetesClient_ListPods_Call) Run(run func(ctx context.Context, selector *metav1.LabelSelector)) *KubernetesClient_ListPods_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*metav1.LabelSelector))
	})
	return _c
}

func (_c *KubernetesClient_ListPods_Call) Return(_a0 *v1.PodList, _a1 error) *KubernetesClient_ListPods_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KubernetesClient_ListPods_Call) RunAndReturn(run func(context.Context, *metav1.LabelSelector) (*v1.PodList, error)) *KubernetesClient_ListPods_Call {
	_c.Call.Return(run)
	return _c
}

// PortForwardPod provides a mock function with given fields: podName, podPort, localport, stopCh
func (_m *KubernetesClient) PortForwardPod(podName string, podPort int64, localport int64, stopCh chan struct{}) error {
	ret := _m.Called(podName, podPort, localport, stopCh)

	if len(ret) == 0 {
		panic("no return value specified for PortForwardPod")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int64, int64, chan struct{}) error); ok {
		r0 = rf(podName, podPort, localport, stopCh)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KubernetesClient_PortForwardPod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PortForwardPod'
type KubernetesClient_PortForwardPod_Call struct {
	*mock.Call
}

// PortForwardPod is a helper method to define mock.On call
//   - podName string
//   - podPort int64
//   - localport int64
//   - stopCh chan struct{}
func (_e *KubernetesClient_Expecter) PortForwardPod(podName interface{}, podPort interface{}, localport interface{}, stopCh interface{}) *KubernetesClient_PortForwardPod_Call {
	return &KubernetesClient_PortForwardPod_Call{Call: _e.mock.On("PortForwardPod", podName, podPort, localport, stopCh)}
}

func (_c *KubernetesClient_PortForwardPod_Call) Run(run func(podName string, podPort int64, localport int64, stopCh chan struct{})) *KubernetesClient_PortForwardPod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int64), args[2].(int64), args[3].(chan struct{}))
	})
	return _c
}

func (_c *KubernetesClient_PortForwardPod_Call) Return(_a0 error) *KubernetesClient_PortForwardPod_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KubernetesClient_PortForwardPod_Call) RunAndReturn(run func(string, int64, int64, chan struct{}) error) *KubernetesClient_PortForwardPod_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function with given fields: ctx, selector
func (_m *KubernetesClient) Watch(ctx context.Context, selector *metav1.LabelSelector) (<-chan *watch.Event, error) {
	ret := _m.Called(ctx, selector)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 <-chan *watch.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *metav1.LabelSelector) (<-chan *watch.Event, error)); ok {
		return rf(ctx, selector)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *metav1.LabelSelector) <-chan *watch.Event); ok {
		r0 = rf(ctx, selector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *watch.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *metav1.LabelSelector) error); ok {
		r1 = rf(ctx, selector)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KubernetesClient_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type KubernetesClient_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - ctx context.Context
//   - selector *metav1.LabelSelector
func (_e *KubernetesClient_Expecter) Watch(ctx interface{}, selector interface{}) *KubernetesClient_Watch_Call {
	return &KubernetesClient_Watch_Call{Call: _e.mock.On("Watch", ctx, selector)}
}

func (_c *KubernetesClient_Watch_Call) Run(run func(ctx context.Context, selector *metav1.LabelSelector)) *KubernetesClient_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*metav1.LabelSelector))
	})
	return _c
}

func (_c *KubernetesClient_Watch_Call) Return(_a0 <-chan *watch.Event, _a1 error) *KubernetesClient_Watch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KubernetesClient_Watch_Call) RunAndReturn(run func(context.Context, *metav1.LabelSelector) (<-chan *watch.Event, error)) *KubernetesClient_Watch_Call {
	_c.Call.Return(run)
	return _c
}

// NewKubernetesClient creates a new instance of KubernetesClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKubernetesClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *KubernetesClient {
	mock := &KubernetesClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
